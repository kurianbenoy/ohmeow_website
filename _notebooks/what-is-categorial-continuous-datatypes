{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of training-validation-test-sets.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyPCCfw3OyvivcubhUAk+kB4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sWJL4-Qwluy4"
      },
      "source": [
        "# \"What is the difference between categorial and continuous datatypes\"\n",
        "> \"Insights from [\\\"Deep Learning for Coders with fastai & PyTorch\\\"](https://github.com/fastai/fastbook) and from around the world\"\n",
        "\n",
        "- toc: true\n",
        "- branch: master\n",
        "- badges: true\n",
        "- hide_binder_badge: true\n",
        "- comments: true\n",
        "- author: Wayde Gilliam\n",
        "- categories: [fastai, fastbook, fastbook-chapter-1, fastbook-chapter-6, fastbook-chapter-7, what-is, how-to, datatypes]\n",
        "- image: images/articles/continuous-categorial-datatypes.png\n",
        "- hide: false\n",
        "- search_exclude: false\n",
        "- permalink: /what-is/categorial-continuous-datatypes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nilyL8K728RC"
      },
      "source": [
        "When it comes to both your inputs and targets, knowing whether they are categorial or continuous guides how you represent them, the loss function you use, and the metrics you choose in measuring performance."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ka023QwyrNF-"
      },
      "source": [
        "---\n",
        "## What is a categorical datatype?\n",
        "\n",
        "***Categorical*** data \"contains values that are one of a discrete set of choice\" such as gender, occupation, day of week, etc... {% fn 1 %}\n",
        "\n",
        "\n",
        "### What if our **target** is categorical?\n",
        "\n",
        "If your target/lables are categorical, then you have either a **multi-classification classification** problem (e.g., you are trying to predict a single class) or a **multi-label classification problem** (e.g., you are trying to predict whether your example belongs to zero or multiple classes). \n",
        "\n",
        "\n",
        "#### Multi-classification tasks\n",
        "\n",
        "For multi-classification tasks, a sensible loss function would be [cross entropy loss](https://ohmeow.com/posts/2020/04/04/understanding-cross-entropy-loss.html) (`nn.CrossEntropyLoss`) and [useful metrics](https://ohmeow.com/what-is/a-metric#Metrics-to-use-based-on-task) are likely to include error rate, accuracy, F1, recall, and/or precision depending on your business objectices and the make up of your dataset.  For example, if you're dealing with a highly imbalanced dataset, choosing accuracy would lead to an inflated sense of model performance since it may be learning to just predict the most common class.\n",
        "\n",
        "\n",
        "> Note: What if you need to predict \"None\"? This is more real world and covered nicely in Zach Mueller's [Recognizing Unknown Images (or the Unknown Label problem)](https://walkwithfastai.com/Unknown_Labels).\n",
        "\n",
        "\n",
        "#### Multi-label tasks\n",
        "\n",
        "For multi-label tasks, a sensible loss function would be binary cross entropy loss (BCE) (`nn.BCEWithLogitsLoss`) and useful metrics are likely to include F1, recall, and/or precision depending on your business objectices and the make up of your dataset. Notice that I didn't include error rate, or its opposite accuracy, as their datasets are generally highly imbalanced. \n",
        "\n",
        "\n",
        "### What if our **input** is categorical?\n",
        "\n",
        "Categorical inputs are generally represented by an **embedding** (e.g., a vector of numbers). ***Why?*** Mostly because it gives your model the ability to provide a more complex representation of your category than a single numer would.  \n",
        "\n",
        "For example, imagine that one of your inputs is day of week (e.g., Sunday, Monday, etc.) ... what does that mean? When combined with other inputs, its likely that the meaning of it is going to be much more nuanced than a single number can represent, and so we'd like to use multiple learned numbers.  This is what an embedding is."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ndpKR-FZolXP"
      },
      "source": [
        "---\n",
        "## What is a continuous datatype?\n",
        "\n",
        "***Continuous*** data is numerical that represents a quantity such as age, salary, prices, etc...\n",
        "\n",
        "\n",
        "### What if our **target** is continuous?\n",
        "\n",
        "If your target/labels are continuous, then you have a regression problem and the most likely loss function you would choose would be mean-square-error loss (MSE) (`nn.MSELoss`)  and your metric MSE as well\n",
        "\n",
        "\n",
        "> \"... MSE is already a a useful metric for this task (although its' probably more interpretable after we take the square root)\" ... the **RMSE** (% fn 3 %}\n",
        "\n",
        "\n",
        "> Note: For tasks that predict a continuous number, consider using `y_range` to constrain the network to predicting a value in the known range of valid values.\n",
        "{% fn 2 %}\n",
        "\n",
        "\n",
        "### What if our **input** is continuous?\n",
        "\n",
        "In many cases there isn't anything special you need to do, in others, it makes sense to scale these numbers so they are in the same range (usually 0 to 1) as the rest of your continuous inputs.  This process is called **normalization**. {% fn 4 %}. The reason you would want to do this is so continuous values with bigger range of values (say 1000) don't drown out those with a smaller range (say 5) during model training.\n",
        "\n",
        "#### Normalization\n",
        "\n",
        "\n",
        "> Note: \"When training a model, if helps if your input data is *normalizaed* - that is, has a mean of 0 and a standard deviation of 1.\n",
        "\n",
        "\n",
        "See [How To Calculate the Mean and Standard Deviation â€” Normalizing Datasets in Pytorch](https://towardsdatascience.com/how-to-calculate-the-mean-and-standard-deviation-normalizing-datasets-in-pytorch-704bd7d05f4c)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-vVs15ZEBEIr",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d382d6fb-42f7-44e9-da48-612fca67ed89"
      },
      "source": [
        "import torch\n",
        "\n",
        "print('Example 1')\n",
        "nums = torch.tensor([0, 50, 100], dtype=float)\n",
        "print(f'Some raw values: {nums}')\n",
        "\n",
        "# 1. calculate their mean and standard deviation\n",
        "m = nums.mean()\n",
        "std = nums.std()\n",
        "print(f'Their mean is {m} and their standard deviation is {std}')\n",
        "\n",
        "# 2. normalize their values \n",
        "normalized = (nums - m) / std\n",
        "print(f'Here are their values after normalization: {normalized}')\n",
        "print('')\n",
        "\n",
        "print('Example 2')\n",
        "nums = torch.tensor([0, 5000, 10000], dtype=float)\n",
        "print(f'Some raw values: {nums}')\n",
        "\n",
        "# 1. calculate their mean and standard deviation\n",
        "m = nums.mean()\n",
        "std = nums.std()\n",
        "print(f'Their mean is {m} and their standard deviation is {std}')\n",
        "\n",
        "# 2. normalize their values \n",
        "normalized = (nums - m) / std\n",
        "print(f'Here are their values after normalization: {normalized}')\n",
        "print('')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Example 1\n",
            "Some raw values: tensor([  0.,  50., 100.], dtype=torch.float64)\n",
            "Their mean is 50.0 and their standard deviation is 50.0\n",
            "Here are their values after normalization: tensor([-1.,  0.,  1.], dtype=torch.float64)\n",
            "\n",
            "Example 2\n",
            "Some raw values: tensor([    0.,  5000., 10000.], dtype=torch.float64)\n",
            "Their mean is 5000.0 and their standard deviation is 5000.0\n",
            "Here are their values after normalization: tensor([-1.,  0.,  1.], dtype=torch.float64)\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Nf3JDnmYDKgc"
      },
      "source": [
        "fastai supplies a `Normalize` transform you can use to do this ... \"it acts on a whole mini-batch at once, so you can add it to the `batch_tfms` secion of your data block ... you need to pass to this transform the mean and standard deviation that you want to use. If you don't, \"fastai will automatically calculate them from a single batch of your data). p.241\n",
        "\n",
        "\n",
        "> Note: \"This means that when you distribute a model, you need to also distribute the statistics used for normalization.\" (p.242)\n",
        "\n",
        "\n",
        "> Important: \"... if you're using a model that someon else has trained, make sure you find out what normalization statistics they used an match them\" (p.242)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LKAQxMmyx8OB"
      },
      "source": [
        "---\n",
        "{{ '\"Chaper 1: Your Deep Learning Journey\". In *[The Fastbook](https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527)* p.46' | fndetail: 1 }}\n",
        "\n",
        "{{ 'Ibid. p.236. A good examle of how RMSE provides a reasonable metric for regression tasks is included on this page in reference to KeyPoint detection (e.g., detecting a point/coordinate, an x and y)' | fndetail: 3 }}\n",
        "\n",
        "{{ 'Ibid., p.47' | fndetail: 2 }}\n",
        "\n",
        "{{ 'Ibid., pp.241-42, 320 includes an extended discussion of the why, how, and where \"normalization\" is needed. ' | fndetail: 4 }}\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wtch8hC7uPk2"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}