{
  
    
        "post0": {
            "title": "A Journey Through Fastbook (AJTFB) - Chapter 4",
            "content": "Other posts in this series: A Journey Through Fastbook (AJTFB) - Chapter 1 A Journey Through Fastbook (AJTFB) - Chapter 2 A Journey Through Fastbook (AJTFB) - Chapter 3 . Chapter 4 . . How to visualize a grayscale image in pandas ... . mnist_path = untar_data(URLs.MNIST_SAMPLE) mnist_path.ls() . (#3) [Path(&#39;/root/.fastai/data/mnist_sample/labels.csv&#39;),Path(&#39;/root/.fastai/data/mnist_sample/valid&#39;),Path(&#39;/root/.fastai/data/mnist_sample/train&#39;)] . sample_3 = Image.open((mnist_path/&#39;train/3&#39;).ls().sorted()[1]) sample_3 . sample_3_t = tensor(sample_3) df = pd.DataFrame(sample_3_t[4:15, 4:22]) df.style.set_properties(**{&#39;font-size&#39;:&#39;6pt&#39;}).background_gradient(&#39;Greys&#39;) . 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 . 0 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1 0 | 0 | 0 | 0 | 0 | 29 | 150 | 195 | 254 | 255 | 254 | 176 | 193 | 150 | 96 | 0 | 0 | 0 | . 2 0 | 0 | 0 | 48 | 166 | 224 | 253 | 253 | 234 | 196 | 253 | 253 | 253 | 253 | 233 | 0 | 0 | 0 | . 3 0 | 93 | 244 | 249 | 253 | 187 | 46 | 10 | 8 | 4 | 10 | 194 | 253 | 253 | 233 | 0 | 0 | 0 | . 4 0 | 107 | 253 | 253 | 230 | 48 | 0 | 0 | 0 | 0 | 0 | 192 | 253 | 253 | 156 | 0 | 0 | 0 | . 5 0 | 3 | 20 | 20 | 15 | 0 | 0 | 0 | 0 | 0 | 43 | 224 | 253 | 245 | 74 | 0 | 0 | 0 | . 6 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 249 | 253 | 245 | 126 | 0 | 0 | 0 | 0 | . 7 0 | 0 | 0 | 0 | 0 | 0 | 0 | 14 | 101 | 223 | 253 | 248 | 124 | 0 | 0 | 0 | 0 | 0 | . 8 0 | 0 | 0 | 0 | 0 | 11 | 166 | 239 | 253 | 253 | 253 | 187 | 30 | 0 | 0 | 0 | 0 | 0 | . 9 0 | 0 | 0 | 0 | 0 | 16 | 248 | 250 | 253 | 253 | 253 | 253 | 232 | 213 | 111 | 2 | 0 | 0 | . 10 0 | 0 | 0 | 0 | 0 | 0 | 0 | 43 | 98 | 98 | 208 | 253 | 253 | 253 | 253 | 187 | 22 | 0 | . . What is a baseline model and why do you want one? . A simple model that you are confident should perform reasonably well. It should be simple to implement and easy to test . Why do you want to start with a baseline model? . ... without starting with a sensible baseline, it is difficult to know whether your super-fancy models are any good . How do you build/find one of these models? . You can search online for folks that have trained models to solve a problem similar to your&#39;s and/or you can start with one of the high-level examples in the fastai docs against your data. There are a bunch covering core vision, text, tabuluar and colab filtering tasks right here. . . Tensors . What is a &quot;Tensor&quot;? . Like a numpy array, but with GPU support. The data it contains must be of the same type and must conform in rectangular shape. . Important: &quot;try to avoid as much as possible writing loops, and replace them by commands that work directly on arrays or tensors&quot; . Let&#39;s take a look .. . threes = (mnist_path/&#39;train/3&#39;).ls().sorted() len(threes), threes[0] . (6131, Path(&#39;/root/.fastai/data/mnist_sample/train/3/10.png&#39;)) . all_threes = [ tensor(Image.open(fp)) for fp in threes ] len(all_threes), all_threes[0].shape . (6131, torch.Size([28, 28])) . stacked_threes = torch.stack(all_threes).float()/255 stacked_threes.shape . torch.Size([6131, 28, 28]) . Important information about tensors include its shape, rank, and type: . print(&#39;shape: &#39;, stacked_threes.shape) # rank = the total number of axes print(&#39;rank: &#39;, stacked_threes.ndim) # type = the datatype of its contents print(&#39;type: &#39;, stacked_threes.dtype) . shape: torch.Size([6131, 28, 28]) rank: 3 type: torch.float32 . Important things you can do to a tensor, view, @, where . stacked_threes_rank_2 = stacked_threes.view(-1, 28*28) print(&#39;orig. shape: &#39;, stacked_threes.shape) print(&#39;make into a rank 2 tensor&#39;, stacked_threes_rank_2.shape) # @ = operator for matrix multiplication print(&#39;result of matrix multiplication: &#39;, (stacked_threes @ torch.randn((1,28,28))).shape) # where = torch.where(a,b,c) =&gt; [b[i] if a[i] else c[i] for i in range(len(a))] ... see p.167 trgs = tensor([1,0,1]) preds = tensor([0.9, 0.4, 0.2]) def mnist_loss(preds, targs): return torch.where(targs == 1, 1 - preds, preds).mean() print(&#39;output of where: &#39;, mnist_loss(preds, trgs)) . orig. shape: torch.Size([6131, 28, 28]) make into a rank 2 tensor torch.Size([6131, 784]) result of matrix multiplication: torch.Size([6131, 28, 28]) output of where: tensor(0.4333) . For an interactive lesson on matrix multiplication, this is the best! . Check out pp.145-148 to learn about &quot;broadcasting&quot;, a critical piece to understanding how you can and should manipulate tensors or numpy arrays! . . Stochastic Gradient Descent - How to train a model . Here are the steps: . INITIALIZE the weights = initializing parameters to random values . | For each image, PREDICT whether it is a 3 or 7 . | Based on the predictions, calculate how good the model is by calculating its LOSS (small is good) . | Calculate the GRADIENT, &quot;which measures for each weight how changing the weight would change the loss&quot; . | STEP, change all the weights based on the gradient . | Starting at step 2, REPEAT . | STOP when you don&#39;t want to train any longer or the model is good enough . | Below, we&#39;ll delve deeper into these steps. We&#39;ll do this by getting a big more into the sample code beginning on p.150 ... . Step 1: Initializing weights . One way is presented on p.164: . def init_params(size, std=1.0) return (torch.randn(size)*std).requires_grad_() weights = init_params((28*28,1)) #=&gt; raturns a rank 2, 784x1 tensor, with random values . Step 3: Calculating the loss . . Important: &quot;For continuous data, it&#8217;s common to use mean squared error&quot;. In order to understand how to write this, read it right-to-left (e.g., error -&gt; square -&gt; mean) . def mse(preds, targs): return ((preds-targs)**2).mean() # in PyTorch loss = F.mse_loss(preds, targs) . . Important: Accuracy is a bad loss function . Why is accuracy a poor loss function? . &quot;The gradient of a funciton is its slope, or its steepness ... how much the value of the function goes up or down, divided by how much we changed the input (y_new - y_old) / (x_new - x_old) .... The problem with [accuracy] is that a small change in weights from x_old to x_new isn&#39;t likely to cause any prediction to change, so (y_new - y_old) will almost always be 0 ... **the gradient is 0 almost everywhere. A very small change in the value of a weight will often not change the accuracy at all . A gradient = 0 will mean that the weights aren&#39;t updated. . Important:&quot;We need a loss function that, when our weights result in slightly better predictions, gives us a slightly better loss&quot; . Metrics v. Loss . Important: &quot;... the metric is to drive human understanding and the loss is to drive automated learning. . Important: &quot;... focus on these metrics, rather than the loss, when judging the performance of a model.&quot; . Important: &quot;... the loss must be a function that has a meaningful derivative ... must be reasonably smooth [so] that [it] would respond to small changes in confidence level. . The loss function is one that can be optimized using its gradient! . Step 4: Calculating the gradients . . Important: &quot;the gradients tell us how much we have to change each weight to make our model better ... allows us to more quickly calculate whether our loss will go up or down we we make those adjustments&quot; . Important: &quot;The gradients tell us only the slope of our function; they don&#8217;t tell us exactly how far to adjust the parameters. But they do give us some idea of how far&quot; (large slope = bigger adjustments needed whereas a small slope suggests we are close to the optimal value) . &quot;The derivative of a function tells you how much a change in its parameters will change its result&quot; . Remember: We are calculating a gradient for EVERY weight so we know how to adjust it to make our model better (i.e., lower the LOSS) . requires_grad tells PyTorch &quot;that we want to calculate gradients with respect to that variable at that value&quot; . def plot_function(f, tx=None, ty=None, title=None, min=-2, max=2, figsize=(6,4)): x = torch.linspace(min,max) fig,ax = plt.subplots(figsize=figsize) ax.plot(x,f(x)) if tx is not None: ax.set_xlabel(tx) if ty is not None: ax.set_ylabel(ty) if title is not None: ax.set_title(title) . Here we pretend that the below is our loss function. Running a number through it, our weight will produce a result, an activation ... in this case, our loss (which again is a value telling us how good or bad our model is; smaller = good) . xt = tensor(-1.5).requires_grad_(); xt . tensor(-1.5000, requires_grad=True) . def f(x): return x**2 loss = f(xt) plot_function(f, &#39;x&#39;, &#39;x**2&#39;) plt.scatter(xt.detach().numpy(), loss.detach().numpy(), color=&#39;red&#39;) print(&#39;Loss: &#39;, loss.item()) . Loss: 2.25 . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: UserWarning: Not providing a value for linspace&#39;s steps is deprecated and will throw a runtime error in a future release. This warning will appear only once per process. (Triggered internally at /pytorch/aten/src/ATen/native/RangeFactories.cpp:23.) . So if our parameter is -1.5 we get a loss = 2.25. Since the direction of our slope is downward (negative), by changing its value to be a bit more positive, we get closer to achieving our goal of minimizing our loss . xt = tensor(-1.).requires_grad_(); xt loss = f(xt) plot_function(f, &#39;x&#39;, &#39;x**2&#39;) plt.scatter(xt.detach().numpy(), loss.detach().numpy(), color=&#39;red&#39;) print(&#39;Loss: &#39;, loss.item()) . Loss: 1.0 . And yes, our loss has improved! If the direction of our slope were upwards (positive), we would conversely want x to be smaller. . BUT now ... imagine having to figure all this out for a million parameters. Obviously, we wouldn&#39;t want to try doing this manually as we did before, and thanks to PyTorch, we don&#39;t have too :) . Remember that by utilizing the requires_grad_() function, we have told PyTorch to keep track of how to compute the gradients based on the other calucations we perform, like running it through our loss function above. Let&#39;s see what that looks like. . xt = tensor(-1.).requires_grad_(); print(xt) loss = f(xt) print(loss) . tensor(-1., requires_grad=True) tensor(1., grad_fn=&lt;PowBackward0&gt;) . That &lt;PowBackward0&gt; is the gradient function it will use to calculate the gradients when needed. And when we need it, we call the backward method to do so. . loss.backward() print(xt.grad) . tensor(-2.) . And the calcuated gradient is exactly what we expected given that to calculate the derivate of x**2 is 2x ... 2*-1 = -2. . Again, the gradient tells us the slope of our function. Here have a a negative/downward slope and so at the very least, we know what moving in that direction will get us closer to the minimum. . The question is now, How far do we move in that direction? . . Step 5: Change all the weights based on the gradient using a &quot;Learning Rate&quot; . The learning rate (or LR) is a number (usually a small number like 1e-3 or 0.1) that we multiply the gradient by to get a better parameter value. For a given parameter/weight w, the calculation looks like this: . w -= w.grad * lr . Notice we take the negative of the grad * lr operation because we want to move in the opposite direction. . Important: We do this in a with torch.no_grad() so that we don&#8217;t calculate the gradient for the gradient calculating operation . lr = 0.01 with torch.no_grad(): xt -= xt.grad * lr print(&#39;New value for xt: &#39;, xt) print(&#39;New loss: &#39;, f(xt)) . New value for xt: tensor(-0.9800, requires_grad=True) New loss: tensor(0.9604) . You can see the loss get smaller which is exactly what we want! &quot;The magnitude of the gradient (i.e., the steepness of the slope) [tells] us how big a step to take.&quot; . The above operation is also called the optimization step . See pp.156-157 for examples of what using a too small or too large LR might look like when training. This could help you troubleshoot things if yours looks wonky. . . Datasets &amp; DataLoaders . A Dataset contains tuples of independent and dependent variables . ds = L(enumerate(string.ascii_lowercase)) ds . (#26) [(0, &#39;a&#39;),(1, &#39;b&#39;),(2, &#39;c&#39;),(3, &#39;d&#39;),(4, &#39;e&#39;),(5, &#39;f&#39;),(6, &#39;g&#39;),(7, &#39;h&#39;),(8, &#39;i&#39;),(9, &#39;j&#39;)...] . A DataLoader receives a dataset and gives us back as many mini-batches are necessary based on the batch size we specify . dl = DataLoader(ds, bs=6, shuffle=True) list(dl) . [(tensor([17, 5, 9, 22, 18, 21]), (&#39;r&#39;, &#39;f&#39;, &#39;j&#39;, &#39;w&#39;, &#39;s&#39;, &#39;v&#39;)), (tensor([15, 3, 23, 1, 0, 19]), (&#39;p&#39;, &#39;d&#39;, &#39;x&#39;, &#39;b&#39;, &#39;a&#39;, &#39;t&#39;)), (tensor([ 4, 10, 16, 25, 8, 2]), (&#39;e&#39;, &#39;k&#39;, &#39;q&#39;, &#39;z&#39;, &#39;i&#39;, &#39;c&#39;)), (tensor([24, 14, 7, 20, 13, 12]), (&#39;y&#39;, &#39;o&#39;, &#39;h&#39;, &#39;u&#39;, &#39;n&#39;, &#39;m&#39;)), (tensor([11, 6]), (&#39;l&#39;, &#39;g&#39;))] . . Measuring distances . See pp.141-142. There are two main ways to measure distances. . L1 norm (or mean absolute difference): Take the mean of the absolute value of differences . l1_loss = (tensor_a - tensor_b).abs().mean() . L2 norm (or root mean squared error, RMSE): Take the square root of the mean of the square differences. The squaring of differences makes everything positive and the square root undoes the squaring. . Important: &quot;... the latter will penalize bigger mistakes more heavily than the former (and be more lenient with small mistakes)&quot; . l2_loss = ((tensor_a - tensor_b) ** 2).sqrt() . . Important PyTorch Modules . A module is a class that inherits from PyTorch&#39;s nn.Module class. &quot;Every PyTorch module knows that parameters it has that can be trained.&quot; . Here are some key ones ... . nn.Linear: Initializes its parameters and performs a linear operation. It contains both the weights and biases in a single class . lin1 = nn.Linear(28*28, 1) # the trainable parameters weights, bias = lin1.parameters() print(weights.shape, bias.shape) . torch.Size([1, 784]) torch.Size([1]) . nn.ReLU: Allows us to add a non-linearity between linear classifiers. Simply put, it ensures that all activations passed to it are a positive number with every negative number replaced with a 0. . Notice below that it has no trainable parameters! . plot_function(F.relu) . non_lin1 = nn.ReLU() print(list(non_lin1.parameters())) print(&#39;using nn.ReLU: &#39;, non_lin1(tensor(-1)), non_lin1(tensor(4))) print(&#39;using max()&#39;, tensor(-1).max(tensor(0.0)), tensor(4).max(tensor(0.0))) . [] using nn.ReLU: tensor(0) tensor(4) using max() tensor(0.) tensor(4.) . Why do you want to have non-linearities? . Because &quot;there&#39;s no point in just putting one linear layout directly after another one, because when we multiply things together and then add them up multiple times, that could be replaced by multiplying different things together and adding them up just once .... BUT if we put a non-linear between them ... this is no longer true. Now each linear layer is somewhat decoupled from the other ones and can do its own useful work.&quot; . These kind of functions are also called &quot;activation functions&quot;, because the only operate and produce activations ... there are no trainable parameters. . nn.Sequential: A module that can be passed modules, which when called, calls each of those layers in turn. . lin2 = nn.Linear(1, 10) seq_model = nn.Sequential(lin1, non_lin1, lin2) seq_params = list(seq_model.parameters()) print(len(seq_params)) for p in seq_params: print(p.shape) . 4 torch.Size([1, 784]) torch.Size([1]) torch.Size([10, 1]) torch.Size([10]) . Why 4? Simple, remember that each nn.Linear above has two trainable parameters (the weights and bias), 2+2 = 4. . . Summary . This chapter walks you through creating a baseline model to a full blown training loop in PyTorch. Read it, and read it again and again! (I do and have). . Important Vocb/Concepts . Activations: Numbers that are calculated by both linear and non-linear layers . Parameters: Randomly initialized parameters that can be trained. . Neural Network: A chain of linear and non-linear functions your data runs through to produce a result. . Gradient: &quot;The derivative of the loss with respect to some parameter of the model&quot; . Backpropagation: The computing of the gradients &quot;of the loss with respect to all model parameters&quot; . Gradient Descent: &quot;Taking a step in the direction opposite to the gradients to make the model parameters a little bit better&quot; . . Resources . https://book.fast.ai - The book&#39;s website; it&#39;s updated regularly with new content and recommendations from everything to GPUs to use, how to run things locally and on the cloud, etc... |",
            "url": "https://ohmeow.com/posts/2021/05/23/ajtfb-chapter-4.html",
            "relUrl": "/posts/2021/05/23/ajtfb-chapter-4.html",
            "date": " • May 23, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "A Journey Through Fastbook (AJTFB) - Chapter 3",
            "content": "Other posts in this series: A Journey Through Fastbook (AJTFB) - Chapter 1 A Journey Through Fastbook (AJTFB) - Chapter 2 . Chapter 3 . The chapter most folks pass over, but shouldn&#39;t. . . Data Ethics . ... sometimes machine learning models can go wrong. They can have bugs. They can be presented with data that they haven&#39;t seen before and behave in ways we don&#39;t expect. Or ... they can be used for something that we would much prefer they were never, ever used for. . ... no one really agrees on what right and wrong are, whether they exist, how to spot them, which people are good and which bad, or pretty much anything else. . If anything, this is a call to humility, self-examination, and thoughtful dialog. Though we are increasingly living in a polarized world where one is judged by what particular slogans they choose, what party they belong too, who they follow on Facebook, and so on, we have the choice to not be such human beings. But in my experience that is easier said than done. It&#39;s too easy to shout at, rather than talk with, the &quot;other&quot; side because we can in blissful ignorance continue believing we got it right without ever being challenged. It&#39;s hard to really reason out our world views and argue with those who don&#39;t agree. If we did, we have find we have more in common that imagined and make further progress as a society into figuring these things out ... things like right and wrong, good and evil, justice and injustice, and how we can get along with each other despite our differences. . The point of this chapter is simple:The goal of ML isn&#39;t to find the model with the lowest loss ... it is to build a model that drives the right kind of actions . . Recourse and accountability . In a complex system, it is easy for no one person to feel responsible for outcomes. . As deep learning practioniers, we have better insight than most into what kind of actions will be made as a result of our model&#39;s results. Therefore, if we care about people in general, we&#39;ll care about those outcomes as much as our model&#39;s validation loss. . . Feedback Loops . Feedback loops can occur when your model is controlling the next round of data you get. . ... an algorithm can interact with its environment to create a feedback loop, making predictions that reinforce actions taken in the real world, which lead to predictions even more pronounced in the same direction. . Part of the problem here is the centrality of metrics in driving a financially important system. . See the &quot;Meetup&quot; example on p.105 . Once people join a single conspiracy-minded [Facebook] group, they are algorithmically routed to a plethora of others. Join an anti-vaccine group, and your suggestions will include anit-GMO, chemtrail watch, falt Earther (yes, really), and &quot;curing cancer naturallay&quot; groups. Rather than pulling a user out of the rabbit hole, the recommendation engine pushes them farther in. . FYI, I think most social media has a net-negative effect on us as humain beings. In particular, I try to avoid Facebook, Instagram, TikTok, and Snapchat while doing my best to limit my only social media account, a Twitter account, to things relevant to data science and public health (and that ain&#39;t easy). . . Bias . There are different kinds of &quot;data ethics&quot; bias, here are 4 types: . Historical Bias . ... comes from the fact that people are biased, processes are biased, and society is biased. [It] is a fundamental, structural issue with the first step of data generation process and can exist even given perfect sampling and feature selection. . Any dataset involving human can have this kind of bias:medical data, sales data, housing data, political data, and so on. . Important: Maybe the best way to understand historical biase in your dataset is by spending time looking at both the outcomes and how they might be used??? . Important: Make sure your data is representative of what your model will see and to evaluate any automatic &quot;labeling&quot; features in your system. (see gorillas example on pp.107-108). . So what this showed is that the developers failed to utilize datasets containing enough darker faces, or test their product with darker faces. . A good reminder that your model will only be as good as the data you trained it on! Sound familiar? . ... the vast majority of AI researches and developers are young white men. Most projects that we have seen do most user testing using friends and families of the immediate product development group. Given this, the kinds of problems we just discussed should not be suprising. . I think at the very least, we need to be forthright about our dataset as much as on model performance. That way, expectations can be managed and a confidence level assigned to the results. A threshold perhaps that could trigger human intervention. . Measurement bias . ... occurs when our models make mistakes because we are measuring the wrong thing, or measuring it the wrong way, or incorporating that measurement into the model inappropriately. . Not sure why, but this is perhaps the most insidious bias because I think its the hardest to figure out. . Aggregation bias . ... occurs when models do not aggregate data in a way that incorporates all of the appropriate factors, or when a model does not include the necessary interaction terms, nonlineraities, or so forth. . These are features that are not included though they would actually improve model performance if they were. . Representation bias . When there is a clear, easy-to-see underlying relationship, a simple model will often assume that this relationship holds all the time. . Essentially models can see this real imbalance and make it bigger than it is. . . Disinformation . It is not necessarily about getting someone to belive something false, but rather often used to sow disharmony and uncertainty, and to get people to give up on seeking the truth. Receiving conflicting accounts can lead people to assume that they can never know whom or what to trust. . Disinformation will unfotunately be one of the greatest legacies of President Trump. A step backwards for American society. A culture that will back if you if you tell them what they want to hear, even if you&#39;re a compulsive liar and base your statements on &quot;gut feel&quot; rather than facts and logic. . While most of us like to think of ourselves as independent-minded, in reality we evolved to be influenced by others in our in-group, and in opposition to those in our out-group. Online discussions can influence our viewpoints, or alter the range of what we consider acceptable viewpoints. Humans are social animals, and as social animals, we are extremely influenced by the people around us. Increasingly, radicalization occurs in online environments; so influence is coming from people in the virtual space of online forums and social networks. . The biggest take here is that I am not as independently minded as I think I am. Knowing thyself is perhaps the best preventative of being swallowed up by disinformation. Limiting social media is another. . Disinformation through autogenerated text is a particularly significant issue . As an NLP guy, this one scares me since part of my work is to summarize text. Knowing this, the first step I&#39;ve taken is to let all business owners know the risk of text generation algorithms generating text that is either false and/or not necessarily reflective of the inputs, as in the case of abstract summarization. The second step I took was to introduce human beings into the process and a workflow that has them look at at least the most potentially wrong summarizations before reports go out. . . What to do??? . You must assuem that any personal data that Facebook or Android keeps are data that governments around the world will try to get or that thieves will try to steal. . Data use and storage are things you need to think about. . I think these are good questions to ask/answer in any project to ensure good outcomes:&gt; * Whose interests, desires, skills, experiences, and values have we simply assumed rather than&gt; actually consulted? . Who are all the stakeholders who will be directly affected by our product? How have their interests been protected? How do we know what their interests really are - have we asked? | Whowhich groups and individuals will be indirectly affected in signficant ways? | Who might use this product that we didn&#39;t expect to use it, or for purposes we didn&#39;t initially intend? | . See pp.119-120 for a bunch of good questions to put into your practice! . When everybody on a team has similar backgrounds, they are likely to have similar blind spots around ethical tasks. . ... first come up with a process, definition, set of questions etc., which is designed to resolve a problem. Then try to come up with an example in which the apparent solution results in a proposal that no one would consider acceptable. This can then lead to further refinement of the solution. . Thinking about all these things may lead one to analysis paralysis or even worse, complete apathy. We need to start with something and be okay with criticism and refactoring. Additionally, we need to be thoughtful in even spot on criticism of others&#39; systems. I don&#39;t think most folks try to make something racist or mysoginistic or whatever, so instead of calling them a &quot;Hitler&quot; on Twitter when we taste something that looks to us like fasicism, maybe a phone call and one-on-one chat is the better and more productive move. . . Resources . https://book.fast.ai - The book&#39;s website; it&#39;s updated regularly with new content and recommendations from everything to GPUs to use, how to run things locally and on the cloud, etc... . | https://forums.fast.ai/c/data-ethics/47 - Forum subcategory for all things &quot;data ethics&quot;. . |",
            "url": "https://ohmeow.com/posts/2020/11/22/ajtfb-chapter-3.html",
            "relUrl": "/posts/2020/11/22/ajtfb-chapter-3.html",
            "date": " • Nov 22, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "A Journey Through Fastbook (AJTFB) - Chapter 2",
            "content": "Other posts in this series: A Journey Through Fastbook (AJTFB) - Chapter 1 . Chapter 2 . Starting Your Project . Things to think about when deciding on project feasibility . When selecting a project, the most important consideration is data availability . If you don&#39;t have enough quality data ... good luck :) . Important: Consider that data augmentation can alleviate both the need for more manual labelling and also protect you from problems with out-of-domain data (e.g. when unexpected image types arise in the data when the model is being used in production) by synthetically creating more data likely to be seen that may not be in your dataset as is. . ... iterate from end to end in your project; don&#39;t spend months fine-tuning your model, or polishing the perfect GUI, or labeling the perfect dataset . This is good advice for any software project ...fail early and fail often. If you don&#39;t, you&#39;re likely to only uncover critical problems much later than you would have before, and even worse, you&#39;re likely to not produce anything at all! In the world of deep learning there are a number of tools, that while helpful, can really get you so bogged down that you never deploy something usable (e.g., experiment tracking tools, hyperparameter optimization libraries, etc...). Also, remember that getting something in production is a different task from winning a kaggle competition, where the later may require use of some of those aforementioned tools and the ensembling of dozens of models. For production, something better than human is often good enough to get out there and through refactoring, improve. . . The Drivetrain Approach . Four Steps . Step 1: Define your objective(s) . It&#39;s amazing how in my 20+ years as a developer, how rare it is that a customer is able to clearly define what they want! In my experience, more than not, it is the developers that end up defining the goals. Not having a clear objective is likely to waste time, energy, and money to produce something that won&#39;t even see the light of day. You can&#39;t gauge the completion or quality of any software project without clear objective(s). . Ex.1: Show most relevant search results. Ex.2: Drive additional sales by recommending to customers items to purchase they otherwise wouldn&#39;t . Step 2: What actions can you take to achieve those objective(s)? . What things can make your goals a reality. Pretty simple. . Ex.1: Ranking the search results will help show the most relevants ones first. Ex.2: Ranking the recommendations will help. . Step 3: What data is needed to take those actions? . If you don&#39;t have the data, you&#39;ll need to get it ... because the data pulls the levers which get you closer to your objective(s). . Ex.1: Seeing what how pages linked to other pages. Ex.2: Collecting data on what customers purchased, what was recommended, and what they did with that info. . Step 4: Build models . Only once you have the data and know what actions you want to be able to take based on the information within it, do you being modeling ... first, defining what models you can even build with that data and second, what data you need to collect for models you can&#39;t. . Ex.1: A model that takes the page relation data and predicts a ranking given a query. Ex.2: Two models that predict the purchasing proabilities conditional on seeing or not seeing a recommendation. . ! pip install fastai -q from fastai.vision import * . . Downloading images, getting the downloaded images, &amp; removing those that are corrupt . Use download_images listed as URLs in a text file urls to download the actual images locally. | Get the file path to the images via get_image_files in an L object. | Get rid of the corrupt images using verify_images and Path.unlink. | path = Path(&#39;bears/grizzly&#39;) download_images(path, urls=image_urls.txt) file_paths = get_image_files(path) failed = verify_images(file_paths) failed.map(Path.unlink) . Notice how L&#39;s map method is used to apply the Path.unlink function to each item in-place. . . Getting help . A few of ways ... . download_images? . download_images?? . doc(download_images) . You can also use pdb.set_trace (in code) or %debug(in a new cell following the one with the error) to step through your code. I use the former all the time ... its a great way to debug and also learn what the code is doing and why. For example, I use it to look at the shape of things as the travel through and out of different layers in my NNs. . import pdb def div_by_zero(): pdb.set_trace() x = 1/0 print(&#39;here&#39;) # uncomment this to see what I&#39;m talking about ... # div_by_zero() . . DataBlock API Basics . In order to make your data &quot;modelable&quot; (via DataLoaders, you need to tell fastai 4 things: . What kind of data you are working with | How to get the data | How to label the data | How to create a validation set | Here&#39;s an example of how this is done with the DataBlock API: . d_block = DataBlock( blocks=(ImageBlock, CategoryBlock), #=&gt; our independent and dependent variable datatypes get_items=get_image_files, #=&gt; how to get our data splitter=RandomSplitter(valid_pct=0.2, seed=42), #=&gt; how to create the validation set get_y=parent_label, #=&gt; how to label our data item_tfms=Resize(128) #=&gt; code that runs against each item as it is fetched . . Important: Use the seed argument to ensure you get the same training/validation set each time you run that code; else you won&#8217;t be able to know if, as you change hyperparameter values, your model performance changed because of those values and/or because of difference in your training/validation sets! &gt; ... a DataBlock object ... is like a template for creating a DataLoaders object . For more detailed discussion of the DataBlock API, see the following resources:1. My article &quot;Finding DataBlock Nirvana with fast.ai v2 - Part 1&quot; . The &quot;Walk with fastai2&quot; videos . | The fastai docs and the DataBlock Tutorials . | Once you&#39;ve defined your blueprint for how to get your modelable data (i.e., your DataLoaders), you need to pass it the &quot;actual source&quot; of your data, which can be a path or a DataFrame or whatever. . dls = d_block.dataloaders(path) . Use dls.show_batch(...) or dls.valid.show_batch(...) to visualize your training/validation data. . Important: You can change the transforms in your DataBlock by reusing the existing DataBlock using d_block.new . d_block = d_block.new(item_tfms=Resize(128, ResizeMethod.squish)) dls = d_block.dataloaders(path) ... d_block = d_block.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeroes&#39;)) dls = d_block.dataloaders(path) ... . . Important: For resizing ... &quot;what we normally do in practice is to randomly select part of the image and then crop to just that part. On each epoch ... we randomly select a different part of each image. This means that our model can learn to focus on, and recognize, different features in our images. It also reflects how images work in the real world: different photos of the same thing may be framed in slightly different ways.&quot; This is done using the RandomResizedCrop transform. . d_block = d_block.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) . min_scale: &quot;how much of the image to select at minimum each time.&quot; 0.5 = select 50% of the image at minimum. . Important: Pass unique=True to your show_batch functions &quot;to have the same image repeated with different versions&quot; of the transforms you&#8217;ve defined. . Data augmentation transorms (e.g., rotation, flipping, perspective warping, brightness changes, contrast changes, etc...) are defined as batch transforms and run on the GPU. . Important: Item Transforms are applied to an item from your dataset when it is fetched, Batch Transforms are applied to a collection of items on the GPU after they have been collated into the same shape. . d_block = d_block.new(item_tfms=RandomResizedCrop(128, min_scale=0.3), batch_tfms=aug_transforms(mult=2)) . batch_tfms: Your batch transforms, or more correctly your after batch transforms . Important: aug_transforms are &quot;a standard set of augmentations that we have found work pretty well&quot; . . Cleaning your model through training . . Important: &quot;It&#8217;s helpful to see where exactly our errors are occuring, to see whether they&#8217;re due to a dataset problem ... or a model problem&quot; using plot_top_losses . interp = ClassificationInterpretation.from_learner(learn) interp.plot_top_losses(5, nrows=1) #&gt; show the 5 examples with the highest loss . . Important: A &quot;model can help you find data issues more quickly ... so we normally prefer to train a quick and simple model first, and then use it to help with data cleaning.&quot; . . Inference . &quot;a model consists of two parts:the architecture and the trained parameters.&quot; You can use it just like any other function . #saves the architecture, the trained parameters, and the definintion of how to create your DataLoaders learn.export() . fastai ... uses your validation set DataLoader for inference by default, so your data augmentation will not be applied. . inf_learn = load_learner(path/&#39;export.pkl&#39;) inf_learn.predict(&#39;images/grizzly.jpg&#39;) inf_learn.dls.vocab # =&gt; To view possible classification categories/labels . For options on how to deploy your app, see the Deployment section in the course website. I personally like to use FastAPI and there is a good starter template here for that. . . How to Avoid Disaster . . Important: Your model is only as good as the data it was trained on . Two problems to watch out for: . out-of-domain data: &quot;data that our model sees in production that is very different to wath it saw during training. | domain shift: &quot;whereby the type of data that our model sees changes over time.&quot; | Mitigation steps: . . Where possible, the first step is to use an entirely manual process with your model running in parallel and not being used to directly drive any actions. . The second step is to try and limit the scop of the model. . The third step is to gradually increase the scope of your rollout. . Important:&quot;Try to think about all the ways in which your system could go wrong, and then think about what measure or report or picture could reflect that problem, and ensure that your regular reporting includes that information.&quot; . . Resources . https://book.fast.ai - The book&#39;s website; it&#39;s updated regularly with new content and recommendations from everything to GPUs to use, how to run things locally and on the cloud, etc... . | https://docs.fast.ai/ - The library&#39;s documentation; includes tutorials and other tips for development. . | https://forums.fast.ai/ - If you&#39;re not part of the community yet, you should be. Before posting a question, search to see if it has been answered already (95% of the time, it has). . |",
            "url": "https://ohmeow.com/posts/2020/11/16/ajtfb-chapter-2.html",
            "relUrl": "/posts/2020/11/16/ajtfb-chapter-2.html",
            "date": " • Nov 16, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "A Journey Through Fastbook (AJTFB) - Chapter 1",
            "content": "Cervantes once wrote that &quot;the journey is better than the inn&quot;, but I rather like to think that the journey is the inn. . It means that the journey, irrespective to its difficulties (and likely because of them), is what you look back on with fondness at its end rather than the end itself. It&#39;s why I enjoy reading &quot;The Lord of the Rings&quot; every five years or so, where as I age and experience the hand life has dealt me, I find myself appreciating different aspects of the story from the time before and gaining new insights into what I value and want to be as a human being. I find my journey with deep learning to be roughly analgous to that. . I&#39;ve been a part of the fast.ai community for several years. I&#39;ve been through the course multiple times (since it was using theano back in the old days), I&#39;ve contributed to the library, and use it as the basis for one of my own. And as with each course, with a re-reading of the book I find myself deriving new insights and appreciating different ideas than those I had before. . And so, while your journey may bring you different revelations, here are the meandering thoughts of one 49 year old married father of 3 living in San Diego, California, USA, as I embark upon the first chapter in what I consider &quot;The Lord of the Rings&quot; of deep learning. . Chapter 1 . How to Learn Deep Learning . You can do this! . Hi, everybody; I&#39;m Jeremy ... I do not have any formal technical education ... didn&#39;t have great grades. I was much more interested in doing real projects. . This is meaningful to me as someone with a BA in History and a MA in Theology. It&#39;s a reminder that if you want something, it&#39;s within your grasp to make it happen if you are willing to put in the work. It&#39;s also a reminder that key to getting there is actually doing something! If find too many people thinking that if they just get into that school, or if they can just take that class, then they&#39;ll be a good software enginner or deep learning practitioner. The reality is that the only way you get there is by doing it ... just like pull-ups (which aren&#39;t much fun when you&#39;re starting out and/or you&#39;re 49 and overweight). . The problem with traditional education . ... how math is taught - we require students to spend years doing rote memorization and learning dry disconnected fundatmentals that we claim will pay off later, long after most of them quit the subject. . This also is the problem with higher education in general, where young people spend at least four to five years learning things they already learned in High School or else things they don&#39;t really care about and will be forgotten right after finals, spending in excess of $100,000 for the privilege of it and likely going into debt in the tens of thousands of dollars, all with this idea that having done it they will be prepared for the real world. Unfortunately, that&#39;s not how it works. Whether you are in a university of even go to university, what matter is what you do ... not what classes you took or what your GPA is. . Deep Learning (and coding in general) is an art maybe more so than a science . The hardest part of deep learning is artisanal. . I remember going to an iOS conference way back in the day and a conference speaker asking how many folks in the session I was sitting in had a background in music. 80-90% of the audience raised their hands. Sure, there is math and stats and a science to deep learning, but like any coding enterprise, it&#39;s an art ... with some artists being better than others along with room for improvement regardless of whether you&#39;re Van Gough or painting by the numbers. . Doing is how you learn, and what you&#39;ve done is what matters . ... focus on your hobbies and passions ... Common character traits in the people who do well at deep learning include playfulness and curiosity. . at Tesla .. CEO Elon Musk says &#39;A PhD is definitely not required. All that matters is a deep understanding of AI &amp; ability to implement NNs in a way that is actually useful .... Don&#39;t care if you even graduated High School.&#39; . ... the most important thing for learning deep learning is writing code and experimenting.&quot; . . Getting Started . Training &amp; Transfer Learning . ... a model is a special kind of program:it&#39;s one that can do many different things, depending &gt; on the weights. . Weights are just variables, and a weight assignment is a particuarl choice of values for those variables. [Weights] are generally referred to as model parameters ... the term weights being reserved for a particular type of model parameter. . The functional form of the model is called its architecture. | . It is &quot;the template of the model that we&#39;re trying to fit; i.e., the actual mathematical function that we&#39;re passing the input data and parameters to&quot; ... whereas the model is a particular set of parameters + the architecture. . The weights are called parameters. | . These are the things that are &quot;learnt&quot;; the values that can change . The predictions are calculated from your indpendent variables [your X] | The [model&#39;s] measure of performance is called the loss ... [which depends on how well your model is able to predict] the correct labels (also known as targets or the dependent variable) [your y] ... [given the independent variables as input]. | . The loss is a measure of model performance that SGD can use to make your model better. A good loss function provides good gradients (slopes) that can be used to make even very minor changes to your weights so as to improve things. Visually, you want gentle rolling hills rather than abrupt steps or jagged peaks. . Transfer learning is the process of taking a &quot;pretrained model&quot; that has been trained on a very large dataset with proven SOTA results, and &quot;fine tuning&quot; it for your specific task, which while likely similar to the task the pretrained model was trained for to one degree or another, is not the necesarily the same. . What does this mean? . The head of your model (the newly added part specific to your dataset/task) should be trained first since it is the only one with completely random weights. | The degree to which your weights of the pretrained model will need to be updated is proportional to how similar your data is to the data it was trained on. The more dissimilar, the more the weights will need to be changed. | Your model will only be as good as the data it was trained on, so make sure what you have is representative of what it will see in the real world. It &quot;can learn to operate on only the patterns seen in the input data used to train it.&quot; | The process of training (or fitting) the model is the process of finding a set of parameter values (or weights) that specialize that general architecture into a model that works well for our particular kind of data [and task] . fastai&#39;s fine_tune method uses proven tricks and hyperparameters for various DL tasks that the author&#39;s have found works well and works most of the time. See p.33 for more info on what it does. . ... once the model is trained - that is, once we&#39;ve chosen our final weight assignments - then we can think of the weights as being part of the model since we&#39;re not varying them anymore. . This means a trained model can be treated like a typical function. . . Metrics . Metrics are a human-understandable measures of model quality whereas the loss is the machine&#39;s. They are based on your validation set and are what you really care about, whereas the loss is &quot;a measure of performance&quot; that the training system can use to update weights automatically. . A good choice for loss is a function &quot;that is easy for stochastic gradient descent (SGD) to use, whereas a good choies for your metrics are functions that your business users will care about. Seldom are they the same because most metrics don&#39;t provide smooth gradients that SGD can use to update your model&#39;s weights. . Examples of common metrics: . error rate = &quot;the proportion of images that were incorrectly identified. . accuracy = the proportation of images that were correctly identified (1 - error rate) . . Validation &amp; Test Sets . What is a validation set? . A validation set (also know as the &quot;development set&quot;) does not include any data from the training set. It&#39;s purpose to is gauge the generalization prowess of your model and also ensure you are neight overfitting or underfitting. . If [the model] makes an accurate prediction for a data item, that should be because it has learned characteristics of that kind of item, and not because the model has been shaped by actually having seen that particular item. . Why do we need a validation set? . [because] what we care about is how well our model works on previously unseen images ... the longer you train for, the better your accuracy will get on the training set ... as the model starts to memorize the training set rather than finding generalizable underlying patterns in the data = overfitting . Overfitting happens when the model &quot;remembers specific features of the input data, rather than generalizing well to data not seen during training.&quot; . Important: Your models should always overfit before anything else. It is your training loss gets better while your validation loss gets worse ... in other words, if you&#8217;re validation loss is improving, even if not to the extent of your training loss, you are not overfitting . Important: ALWAYS include a validation set. . Important: ALWAYS measure your accuracy (or any metrics) on the validation set. . Important: Set the seed parameter so that you &quot;get the same validation set every time&quot; so that &quot;if we change our model and retrain it, we know any differences are due to the changes to the model, not due to having a different random validation set.&quot; The validation set also informs us how we may change the hyperparamters (e.g., model architecture, learning rates, data augmentation, etc...) to improve results. These parameters are NOT learned ... they are choices WE make that affect the learning of the model parameters. . What is a test set? . A test set ensures that we aren&#39;t overfitting our hyperparameter choices; it is held back even from ourselves and used to evaulate the model at the very end. . Important: If evaluating 3rd party solutions know how to create a good test set and how to create a good baseline model. Hold these out from the potential consultants and use them to fairly evaluate their work. . How do you define a good validation and test sets? . See pp.50-54 ... . A key property of the validation and test sets is that they must be representative of the new data you will see in the future. . For time series, that means you&#39;ll likely want to make your validation set a continuous section with the latest dates. . You&#39;ll also want to make sure your model isn&#39;t learning particular ancillary features of particular things in your images (e.g., you want to see how your model performs on a person or boat it hasn&#39;t seen before ... see pp.53-54 for examples). . . Q &amp; A &amp; Best Practices . What is a Transform . A Transform conatins code that is applied automatically during training. There are two kinds ... . item_tfms:Applied to each item2. batch_tfms: Applied to a batch of items at a time using the GPU | Why do we make images 224x224 pixels? . This is the standard size for historical reasons (old pretrained models require this size exactly) ... If you increase the size, you&#39;ll often get a model with better results since it will be able to focus on more details. . Important:Train on progressively larger image sizes using the weights trained on smaller sizes as a kind of pretrained model. . What is a ResNet &amp; Why use it for computer vision tasks? . A ResNet is a model architecture that has proven to work well in CV tasks. Several variants exist with different numbers of layers with the larger architectures taking longer to train and more prone to overfitting especially with smaller datasets. . Important: Start with a smaller ResNet (like 18 or 34) and move up as needed. . Important: If you have a lot of data, the bigger resnets will likely give you better results. And what other things can use images recognizers for besides image tasks? Sound, time series, malware classification ... . ... a good rule of thumb for converting a dataset into an image representation:if the human eye can recognize categories from the images, then a deep learning model should be able to do so too. See pp.36-39 . How can we see what our NN&#39;s are actually learning/doing? . See pp.33-36. Being able to inspect what your NN is doing (e.g., looking at the activations and the gradients) is one of the most important things you can learn as they are often the key to improving results. . Important: Learn how to visualize and understand your activations and gradients! . What is the difference between categorical and continuous datatypes? . Categorical data &quot;contains values taht are one of a discrete set of choice&quot; such as gender, occupation, day of week, etc... . Continuous data is numerical that represents a quantity such as age, salary, prices, etc... . Important: For tasks that predict a continuous number, consider using y_range to constrain the network to predicting a value in the known range of valid values. (see p.47) . . Resources . https://book.fast.ai - The book&#39;s website; it&#39;s updated regularly with new content and recommendations from everything to GPUs to use, how to run things locally and on the cloud, etc... . | https://course.fast.ai/datasets - A variety of slimmed down datasets you can use for various DL tasks that support &quot;rapid prototyping and experimentation.&quot; . | https://huggingface.co/docs/datasets/ - Serves a similar purpose to the fastai datasets but for the NLP domain. Includes metrics and full/sub-set datasets that you can use to benchmark your results against the top guns of deep learning. . Important: Start with a smaller dataset and scale up to full size to accelerate modeling! . |",
            "url": "https://ohmeow.com/posts/2020/11/06/ajtfb-chapter-1.html",
            "relUrl": "/posts/2020/11/06/ajtfb-chapter-1.html",
            "date": " • Nov 6, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Summarization with blurr",
            "content": "# !pip install ohmeow-blurr -q # !pip install datasets -q # !pip install bert-score -q . |████████████████████████████████| 61kB 5.6MB/s |████████████████████████████████| 225kB 12.9MB/s |████████████████████████████████| 1.2MB 17.9MB/s |████████████████████████████████| 204kB 38.2MB/s |████████████████████████████████| 2.1MB 34.3MB/s |████████████████████████████████| 51kB 8.8MB/s |████████████████████████████████| 112kB 54.5MB/s |████████████████████████████████| 245kB 58.9MB/s |████████████████████████████████| 61kB 9.1MB/s |████████████████████████████████| 901kB 55.8MB/s |████████████████████████████████| 3.3MB 57.4MB/s Building wheel for seqeval (setup.py) ... done |████████████████████████████████| 61kB 5.3MB/s . import datasets import pandas as pd from fastai.text.all import * from transformers import * from blurr.data.all import * from blurr.modeling.all import * . Data Preparation . We&#39;re going to use to use the datasets library from huggingface to grab your raw data. This package gives you access to all kinds of NLP related datasets, explanations of each, and various task specific metrics to use in evaluating your model. The best part being everything comes down to you in JSON! This makes it a breeze to get up and running quickly! . We&#39;ll just use a subset of the training set to build both our training and validation DataLoaders . raw_data = datasets.load_dataset(&#39;cnn_dailymail&#39;, &#39;3.0.0&#39;, split=&#39;train[:1%]&#39;) . Downloading and preparing dataset cnn_dailymail/3.0.0 (download: 558.32 MiB, generated: 1.28 GiB, post-processed: Unknown size, total: 1.82 GiB) to /root/.cache/huggingface/datasets/cnn_dailymail/3.0.0/3.0.0/3cb851bf7cf5826e45d49db2863f627cba583cbc32342df7349dfe6c38060234... Dataset cnn_dailymail downloaded and prepared to /root/.cache/huggingface/datasets/cnn_dailymail/3.0.0/3.0.0/3cb851bf7cf5826e45d49db2863f627cba583cbc32342df7349dfe6c38060234. Subsequent calls will reuse this data. . df = pd.DataFrame(raw_data) df.head() . article highlights id . 0 It&#39;s official: U.S. President Barack Obama wants lawmakers to weigh in on whether to use military force in Syria. Obama sent a letter to the heads of the House and Senate on Saturday night, hours after announcing that he believes military action against Syrian targets is the right step to take over the alleged use of chemical weapons. The proposed legislation from Obama asks Congress to approve the use of military force &quot;to deter, disrupt, prevent and degrade the potential for future uses of chemical weapons or other weapons of mass destruction.&quot; It&#39;s a step that is set to turn an internat... | Syrian official: Obama climbed to the top of the tree, &quot;doesn&#39;t know how to get down&quot; nObama sends a letter to the heads of the House and Senate . nObama to seek congressional approval on military action against Syria . nAim is to determine whether CW were used, not by whom, says U.N. spokesman . | 0001d1afc246a7964130f43ae940af6bc6c57f01 | . 1 (CNN) -- Usain Bolt rounded off the world championships Sunday by claiming his third gold in Moscow as he anchored Jamaica to victory in the men&#39;s 4x100m relay. The fastest man in the world charged clear of United States rival Justin Gatlin as the Jamaican quartet of Nesta Carter, Kemar Bailey-Cole, Nickel Ashmeade and Bolt won in 37.36 seconds. The U.S finished second in 37.56 seconds with Canada taking the bronze after Britain were disqualified for a faulty handover. The 26-year-old Bolt has now collected eight gold medals at world championships, equaling the record held by American trio... | Usain Bolt wins third gold of world championship . nAnchors Jamaica to 4x100m relay victory . nEighth gold at the championships for Bolt . nJamaica double up in women&#39;s 4x100m relay . | 0002095e55fcbd3a2f366d9bf92a95433dc305ef | . 2 Kansas City, Missouri (CNN) -- The General Services Administration, already under investigation for lavish spending, allowed an employee to telecommute from Hawaii even though he is based at the GSA&#39;s Kansas City, Missouri, office, a CNN investigation has found. It cost more than $24,000 for the business development specialist to travel to and from the mainland United States over the past year. He is among several hundred GSA &quot;virtual&quot; workers who also travel to various conferences and their home offices, costing the agency millions of dollars over the past three years. Under the program, ... | The employee in agency&#39;s Kansas City office is among hundreds of &quot;virtual&quot; workers . nThe employee&#39;s travel to and from the mainland U.S. last year cost more than $24,000 . nThe telecommuting program, like all GSA practices, is under review . | 00027e965c8264c35cc1bc55556db388da82b07f | . 3 Los Angeles (CNN) -- A medical doctor in Vancouver, British Columbia, said Thursday that California arson suspect Harry Burkhart suffered from severe mental illness in 2010, when she examined him as part of a team of doctors. Dr. Blaga Stancheva, a family physician and specialist in obstetrics, said both Burkhart and his mother, Dorothee, were her patients in Vancouver while both were applying for refugee status in Canada. &quot;I was asked to diagnose and treat Harry to support a claim explaining why he was unable to show up in a small-claims court case,&quot; Stancheva told CNN in a phone intervie... | NEW: A Canadian doctor says she was part of a team examining Harry Burkhart in 2010 . nNEW: Diagnosis: &quot;autism, severe anxiety, post-traumatic stress disorder and depression&quot; nBurkhart is also suspected in a German arson probe, officials say . nProsecutors believe the German national set a string of fires in Los Angeles . | 0002c17436637c4fe1837c935c04de47adb18e9a | . 4 (CNN) -- Police arrested another teen Thursday, the sixth suspect jailed in connection with the gang rape of a 15-year-old girl on a northern California high school campus. Jose Carlos Montano, 18, was arrested on charges of felony rape, rape in concert with force, and penetration with a foreign object, said Richmond Police Lt. Mark Gagan. Montano was arrested Thursday evening in San Pablo, California, a small town about two miles from the city of Richmond, where the crime took place. Montano, who was held in lieu of $1.3 million bail, is accused of taking part in what police said was a 2½... | Another arrest made in gang rape outside California school . nInvestigators say up to 20 people took part or stood and watched the assault . nFour suspects appeared in court Thursday; three wore bulletproof vests . | 0003ad6ef0c37534f80b55b4235108024b407f0b | . We begin by getting our hugginface objects needed for this task (e.g., the architecture, tokenizer, config, and model). We&#39;ll use blurr&#39;s get_hf_objects helper method here. . pretrained_model_name = &quot;facebook/bart-large-cnn&quot; hf_arch, hf_config, hf_tokenizer, hf_model = BLURR.get_hf_objects(pretrained_model_name, model_cls=BartForConditionalGeneration) hf_arch, type(hf_config), type(hf_tokenizer), type(hf_model) . . (&#39;bart&#39;, transformers.models.bart.configuration_bart.BartConfig, transformers.models.bart.tokenization_bart_fast.BartTokenizerFast, transformers.models.bart.modeling_bart.BartForConditionalGeneration) . Next we need to build out our DataBlock. Remember tha a DataBlock is a blueprint describing how to move your raw data into something modelable. That blueprint is executed when we pass it a data source, which in our case, will be the DataFrame we created above. We&#39;ll use a random subset to get things moving along a bit faster for the demo as well. . Notice that the blurr DataBlock as been dramatically simplified given the shift to on-the-fly batch-time tokenization. All we need is to define a single HF_Seq2SeqBeforeBatchTransform instance, optionally passing a list to any of the tokenization arguments to differentiate the values for the input and summary sequences. In addition to specifying a custom max length for the inputs, we can also do the same for the output sequences ... and with the latest release of blurr, we can even customize the text generation by passing in text_gen_kwargs. . We pass noop as a type transform for our targets because everything is already handled by the batch transform now. . text_gen_kwargs = default_text_gen_kwargs(hf_config, hf_model, task=&#39;summarization&#39;); text_gen_kwargs . {&#39;bad_words_ids&#39;: None, &#39;bos_token_id&#39;: 0, &#39;decoder_start_token_id&#39;: 2, &#39;diversity_penalty&#39;: 0.0, &#39;do_sample&#39;: False, &#39;early_stopping&#39;: True, &#39;encoder_no_repeat_ngram_size&#39;: 0, &#39;eos_token_id&#39;: 2, &#39;forced_bos_token_id&#39;: 0, &#39;forced_eos_token_id&#39;: 2, &#39;length_penalty&#39;: 2.0, &#39;max_length&#39;: 142, &#39;min_length&#39;: 56, &#39;no_repeat_ngram_size&#39;: 3, &#39;num_beam_groups&#39;: 1, &#39;num_beams&#39;: 4, &#39;num_return_sequences&#39;: 1, &#39;output_attentions&#39;: False, &#39;output_hidden_states&#39;: False, &#39;output_scores&#39;: False, &#39;pad_token_id&#39;: 1, &#39;remove_invalid_values&#39;: False, &#39;repetition_penalty&#39;: 1.0, &#39;return_dict_in_generate&#39;: False, &#39;temperature&#39;: 1.0, &#39;top_k&#39;: 50, &#39;top_p&#39;: 1.0, &#39;use_cache&#39;: True} . hf_batch_tfm = HF_Seq2SeqBeforeBatchTransform(hf_arch, hf_config, hf_tokenizer, hf_model, max_length=256, max_tgt_length=130, text_gen_kwargs=text_gen_kwargs) blocks = (HF_Seq2SeqBlock(before_batch_tfm=hf_batch_tfm), noop) dblock = DataBlock(blocks=blocks, get_x=ColReader(&#39;article&#39;), get_y=ColReader(&#39;highlights&#39;), splitter=RandomSplitter()) . dls = dblock.dataloaders(df, bs=2) . len(dls.train.items), len(dls.valid.items) . (2297, 574) . It&#39;s always a good idea to check out a batch of data and make sure the shapes look right. . b = dls.one_batch() len(b), b[0][&#39;input_ids&#39;].shape, b[1].shape . (2, torch.Size([2, 256]), torch.Size([2, 68])) . Even better, we can take advantage of blurr&#39;s TypeDispatched version of show_batch to look at things a bit more intuitively. We pass in the dls via the dataloaders argument so we can access all tokenization/modeling configuration stored in our batch transform above. . dls.show_batch(dataloaders=dls, max_n=2) . text target . 0 The news from Pakistan is generally bad news. In the past week, which was far from atypical, suicide bombers attacked a court building in the northwestern city of Peshawar taking hostages and killing four people. In the southern city of Karachi the director of a renowned social program working in the megacity&#39;s poorest neighborhoods was shot and killed. And gunmen kidnapped two female Czech tourists in southwestern Pakistan. But this past week also saw more than a glimmer of good news from Pakistan: Saturday, March 16 marked an extraordinary moment in Pakistani history, as this is the first time a civilian government has served its entire five-year term (from 2008 to 2013). And, for the first time in its history, the Pakistani military appears unwilling to mount a coup against the civilian government. The military has successfully executed three coups and attempted a number of others since Pakistan&#39;s independence in 1947. Today the army understands that the most recent coup by General Pervez Musharraf who took power in 1999 has tarnished its brand. Musharraf hung on to power for almost a decade and his imposition of emergency rule in 2007 triggered massive street protests and eventually his ouster. On Saturday, Musharaf announced he is returning to Pakistan from self-imposed exile on March 24 to | Peter Bergen: For the first time, Pakistan government served its full term. nHe says lack of military coup attempt shows government is more stable than many think. nElections in Pakistan, Afghanistan likely to be crucial for those two nations. nBergen: He says Afghan economy is resilient and corruption may be receding. | . 1 (CNN) -- A controversial Colombian senator who has obtained the release of 16 hostages held by Marxist guerrillas is the leading candidate to receive this year&#39;s Nobel Peace Prize, which will be announced Friday, said an independent research institute in Norway. Sen. Piedad Cordoba, right, of Colombia reportedly is one of three top contenders for the Nobel Peace Prize. Sen. Piedad Cordoba is the most likely recipient among three leading contenders, said the Oslo-based International Peace Research Institute. The others the institute named are Jordanian Prince Ghazi bin Muhammad, a philosophy professor in Islamic faith at Jordan University, and Afghan physician and human rights activist Sima Samar. Though the institute considers Cordoba the front-runner, no single candidate has emerged as the clear-cut favorite, as sometimes happens, said Kristian Berg Harpviken, director of the peace institute. &quot;It really is quite open this year,&quot; Harpviken said. This year&#39;s peace prize nominees include 172 people and 33 organizations. The committee does not release the names of the nominees. The 50-year-old peace institute, which is often called PRIO, has no connection with the Nobel committee that awards the peace prize. Harpviken said he believes the | Independent research institute cites three top contenders for Nobel Peace Prize. nNo candidate emerges as clear-cut favorite; winner to be announced Friday. nColombian senator, Jordanian prince, Afghan rights activist among contenders. nVietnamese Buddhist monk, Chinese dissidents also could be awarded prize. | . Training . We&#39;ll prepare our BART model for training by wrapping it in blurr&#39;s HF_BaseModelWrapper object and using the callback, HF_BaseModelCallback, as usual. A new HF_Seq2SeqMetricsCallback object allows us to specify Seq2Seq metrics we want to use, things like rouge and bertscore for tasks like summarization as well as metrics such as meteor, bleu, and sacrebleu for translations tasks. Using huggingface&#39;s metrics library is as easy as specifying a metrics configuration such as below. . Once we have everything in place, we&#39;ll freeze our model so that only the last layer group&#39;s parameters of trainable. See here for our discriminitative learning rates work in fastai. . Note: This has been tested with ALOT of other Seq2Seq models; see the docs for more information. . seq2seq_metrics = { &#39;rouge&#39;: { &#39;compute_kwargs&#39;: { &#39;rouge_types&#39;: [&quot;rouge1&quot;, &quot;rouge2&quot;, &quot;rougeL&quot;], &#39;use_stemmer&#39;: True }, &#39;returns&#39;: [&quot;rouge1&quot;, &quot;rouge2&quot;, &quot;rougeL&quot;] }, &#39;bertscore&#39;: { &#39;compute_kwargs&#39;: { &#39;lang&#39;: &#39;en&#39; }, &#39;returns&#39;: [&quot;precision&quot;, &quot;recall&quot;, &quot;f1&quot;] } } . model = HF_BaseModelWrapper(hf_model) learn_cbs = [HF_BaseModelCallback] fit_cbs = [HF_Seq2SeqMetricsCallback(custom_metrics=seq2seq_metrics)] learn = Learner(dls, model, opt_func=ranger, loss_func=CrossEntropyLossFlat(), cbs=learn_cbs, splitter=partial(seq2seq_splitter, arch=hf_arch)).to_fp16() learn.create_opt() learn.freeze() . . Still experimenting with how to use fastai&#39;s learning rate finder for these kinds of models. If you all have any suggestions or interesting insights to share, please let me know. We&#39;re only going to train the frozen model for one epoch for this demo, but feel free to progressively unfreeze the model and train the other layers to see if you can best my results below. . learn.lr_find(suggestions=True) . SuggestedLRs(lr_min=0.09120108485221863, lr_steep=0.7585775852203369) . It&#39;s also not a bad idea to run a batch through your model and make sure the shape of what goes in, and comes out, looks right. . b = dls.one_batch() preds = learn.model(b[0]) len(preds),preds[0], preds[1].shape . (4, tensor(3.8408, device=&#39;cuda:0&#39;, grad_fn=&lt;NllLossBackward&gt;), torch.Size([2, 68, 50264])) . learn.fit_one_cycle(1, lr_max=3e-5, cbs=fit_cbs) . epoch train_loss valid_loss rouge1 rouge2 rougeL bertscore_precision bertscore_recall bertscore_f1 time . 0 | 1.697474 | 1.692343 | 0.375504 | 0.157680 | 0.253458 | 0.875942 | 0.890704 | 0.883181 | 12:32 | . . And now we can look at the generated predictions using our text_gen_kwargs above . learn.show_results(learner=learn, max_n=2) . text target prediction . 0 (CNN) -- Two weeks. Two gut-wrenching, frustrating, mysterious weeks. That&#39;s how long it&#39;s been since 227 passengers and 12 crew members boarded Malaysia Airlines Flight 370, destined for Beijing. A routine trip, it seemed, to catch up relatives in time for the weekend, start on a work assignment or just get away. Where they got to, still unknown. An exhaustive search -- covering a mind-boggling 2.97 million square miles, which is nearly the size of the continental United States -- has yielded some clues, but no proof of where the Boeing 777 is or definitively what happened to it. The latest, most notable lead revolved around two large objects detected by satellite Sunday floating on waters over 1,400 miles off of Australia&#39;s west coast. The first of several Australian military planes, as well as two long-range commercial jets, resumed their search Saturday morning to find any trace of the objects, amid some skepticism that they or ships in the area ever will and, if they do, that whatever they find will be related to the missing aircraft. Australian Prime Minister Tony Abbott on Friday defended the decision to announce the find, saying Australia owes it to families of those missing &quot;to give them information as soon as it&#39;s | NEW: Planes depart Australia to resume their search for airplane debris. nNEW: Official: Passengers&#39; relatives are moved to a different Kuala Lumpur hotel. nObjects seen on satellite spark intensive search in southern Indian Ocean. nU.S. officials: Files were deleted from flight simulator&#39;s hard drive after February 3. | NEW: Australian military planes resume their search Saturday morning . nThe search area is nearly the size of the continental United States . nIt&#39;s been more than two weeks since Malaysia Airlines Flight 370 disappeared . nA satellite detected two objects floating in waters over 1,400 miles off Australia&#39;s west coast . nAustralia&#39;s prime minister defends the decision to announce the find . | . 1 U.N. weapons inspectors returned &quot;overwhelming and indisputable&quot; evidence of the use of nerve gas in Syria, Secretary-General Ban Ki-moon said Monday, calling the findings &quot;beyond doubt and beyond the pale.&quot; The inspectors&#39; 38-page report was released after Ban briefed Security Council members on its contents. The team found what it called &quot;clear and convincing evidence&quot; that the nerve agent sarin was delivered by surface-to-surface rockets &quot;on a relatively large scale&quot; in the suburbs of the Syrian capital Damascus on August 21. &quot;It is the most significant confirmed use of chemical weapons against civilians since Saddam Hussein used them in Halabja in 1988, and the worst use of weapons of mass destruction in the 21st century,&quot; Ban said. &quot;The international community has a responsibility to ensure that chemical weapons never re-emerge as an instrument of warfare,&quot; he said. Ban called the attack &quot;a war crime&quot; and a violation of treaties banning the use of chemical weapons that date back to 1925. But the inspectors&#39; mandate did not include assigning blame for the attack, and Ban would not speculate on who launched the attack. The team did identify two types or rockets it said were used to deliver the gas and their trajectories, and international | Syria findings &quot;beyond doubt and beyond the pale,&quot; Ban says. nU.S. to provide chemical protective gear to opposition, inspectors. nSarin report demands &quot;a unified and decisive response,&quot; Syrian opposition says. nSyria says helicopter was shot down after straying into Turkish airspace. | Ban Ki-moon calls the findings &quot;beyond doubt and beyond the pale&quot; nInspectors&#39; 38-page report released after Ban briefed Security Council members on its contents . n&quot;The international community has a responsibility to ensure that chemical weapons never re-emerge as an instrument of warfare,&quot; Ban says . nThe inspectors&#39; mandate did not include assigning blame for the attack, and Ban would not speculate on who launched the attack . | . Even better though, blurr augments the fastai Learner with a blurr_summarize method that allows you to use huggingface&#39;s PreTrainedModel.generate method to create something more human-like. . test_article = &quot;&quot;&quot; The past 12 months have been the worst for aviation fatalities so far this decade - with the total of number of people killed if airline crashes reaching 1,050 even before the Air Asia plane vanished. Two incidents involving Malaysia Airlines planes - one over eastern Ukraine and the other in the Indian Ocean - led to the deaths of 537 people, while an Air Algerie crash in Mali killed 116 and TransAsia Airways crash in Taiwan killed a further 49 people. The remaining 456 fatalities were largely in incidents involving small commercial planes or private aircraft operating on behalf of companies, governments or organisations. Despite 2014 having the highest number of fatalities so far this decade, the total number of crashes was in fact the lowest since the first commercial jet airliner took off in 1949 - totalling just 111 across the whole world over the past 12 months. The all-time deadliest year for aviation was 1972 when a staggering 2,429 people were killed in a total of 55 plane crashes - including the crash of Aeroflot Flight 217, which killed 174 people in Russia, and Convair 990 Coronado, which claimed 155 lives in Spain. However this year&#39;s total death count of 1,212, including those presumed dead on board the missing Air Asia flight, marks a significant rise on the very low 265 fatalities in 2013 - which led to it being named the safest year in aviation since the end of the Second World War. Scroll down for videos. Deadly: The past 12 months have been the worst for aviation fatalities so far this decade - with the total of number of people killed if airline crashes reaching 1,158 even before the Air Asia plane (pictured) vanished. Fatal: Two incidents involving Malaysia Airlines planes - one over eastern Ukraine (pictured) and the other in the Indian Ocean - led to the deaths of 537 people. Surprising: Despite 2014 having the highest number of fatalities so far this decade, the total number of crashes was in fact the lowest since the first commercial jet airliner took off in 1949. 2014 has been a horrific year for Malaysia-based airlines, with 537 people dying on Malaysia Airlines planes, and a further 162 people missing and feared dead in this week&#39;s Air Asia incident. In total more than half the people killed in aviation incidents this year had been flying on board Malaysia-registered planes. In January a total of 12 people lost their lives in five separate incidents, while the same number of crashes in February killed 107. &quot;&quot;&quot; . We can override the text_gen_kwargs we specified for our DataLoaders when we generate text using blurr&#39;s Learner.blurr_generate method . outputs = learn.blurr_generate(test_article, early_stopping=True, num_beams=4, num_return_sequences=3) for idx, o in enumerate(outputs): print(f&#39;=== Prediction {idx+1} === n{o} n&#39;) . === Prediction 1 === The past 12 months have been the worst for aviation fatalities so far this decade . The total number of people killed if airline crashes reached 1,158 even before Air Asia plane vanished . 2014 has been a horrific year for Malaysia-based airlines, with 537 people dying on Malaysia Airlines planes, and a further 162 people missing and feared dead in this week&#39;s Air Asia incident . More than half the people killed in aviation incidents this year had been flying on Malaysia-registered planes . === Prediction 2 === The past 12 months have been the worst for aviation fatalities so far this decade . The total number of people killed if airline crashes reached 1,158 even before Air Asia plane vanished . 2014 has been a horrific year for Malaysia-based airlines, with 537 people dying on Malaysia Airlines planes, and a further 162 people missing and feared dead in this week&#39;s Air Asia incident . This year&#39;s total death count of 1,212 marks a significant rise on the very low 265 fatalities in 2013 . === Prediction 3 === The past 12 months have been the worst for aviation fatalities so far this decade . The total number of people killed if airline crashes reached 1,158 even before Air Asia plane vanished . 2014 has been a horrific year for Malaysia-based airlines, with 537 people dying on Malaysia Airlines planes, and a further 162 people missing and feared dead in this week&#39;s Air Asia incident . More than half the people killed in aviation incidents this year had been flying on board Malaysia-registered planes . . What about inference? Easy! . learn.metrics = None learn.export(fname=&#39;ft_cnndm_export.pkl&#39;) . inf_learn = load_learner(fname=&#39;ft_cnndm_export.pkl&#39;) inf_learn.blurr_generate(test_article) . [&#34; The past 12 months have been the worst for aviation fatalities so far this decade . nThe total number of people killed if airline crashes reached 1,158 even before Air Asia plane vanished . n2014 has been a horrific year for Malaysia-based airlines, with 537 people dying on Malaysia Airlines planes, and a further 162 people missing and feared dead in this week&#39;s Air Asia incident . nMore than half the people killed in aviation incidents this year had been flying on Malaysia-registered planes .&#34;] . That&#39;s it . blurr supports a number of huggingface transformer model tasks in addition to summarization (e.g., sequence classification , token classification, and question/answering, causal language modeling, and transation). The docs include examples for each of these tasks if you&#39;re curious to learn more. . For more information about ohmeow or to get in contact with me, head over to ohmeow.com for all the details. . Thanks! .",
            "url": "https://ohmeow.com/posts/2020/05/23/text-generation-with-blurr.html",
            "relUrl": "/posts/2020/05/23/text-generation-with-blurr.html",
            "date": " • May 23, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Finding DataBlock Nirvana with fast.ai v2 - Part 1",
            "content": "# !pip install git+https://github.com/fastai/fastai2 # !pip install git+https://github.com/fastai/fastcore . from fastai2.vision.all import * . Intoduction . Flying at 50,000 feet . At a high level, most machine learning and deep learning systems can be summed up as consisting of three primary elements. Data, an architecture/model, and a loss function. It can be visually described as such: . . The data describes the information given to the model for learning a specific task, and the loss function provides the feedback necessary for the model to improve in that task via a number that tells it how well it is doing. . Why is thinking about our data pipeline important? . Simple! You can&#39;t have a good model without a good architecture and proper loss function, but you can&#39;t have anything without data. And getting good data that can be transformed into something modelable isn&#39;t necessarily easy. In the slide deck presentation heard throughout the ML world, Andrej Karpathy, Senior Director of Artifical Intelligence at Tesla, put it this way: . . Coming from academia and the utopia of prepared datasets ready of modeling, he found that in the real world, the bread and butter of a deep learning system and where the blood, sweat, and tears would be shed, was in the data. Data acquisition, cleaning, preparation, and the day-to-day management thereof. This same sentiment can as much be inferred from any of you that watched Jeremy Howard&#39;s v2 walk through in late 20191... every single session was about getting your data modelable using the new v2 bits. That should tell you a lot! . So how do we do it? How do we prepare our datasets for modeling? . While there are many ways, even with fast.ai, most indicators point to it&#39;s DataBlock API as the answer. . What is the DataBlock API? . The DataBlock API is a blueprint for transforming your raw data into something that can fed into a model using the fast.ai framework. It is their high-level data API, one that builds upon their low-level Datasets/DataLoaders API, and also their mid-level Transform based API. . All three incorporate some new ideas for getting your data good to go, and the choice isn&#39;t necessary one or the other. . Dropping down to 30,000 feet ... what is it? . The DataBlock API consists of THREE main components: getters, transforms, and a splitters. . getters tell it how to &quot;get&quot; the raw data (e.g., from the file system as file paths, a Pandas DataFrame). . | transforms tell it how to &quot;transform&quot; that raw data progressively into something that can be fed into a model (e.g., a numeric representation of your inputs and targets). . | splitters define various strategies you can implore to create your training and validation datasets. . | We&#39;ll be talking a lot about transforms in this article, but one of their most interesting characteristics is that they can be defined to transform your raw data into a numerical representation (as &quot;block transforms&quot;), to run on your CPU when an item from your dataset is fetched (as an &quot;item transform&quot;) , or on the GPU after a mini-batch of your data has been collated into a square matrix and right before it is ran through your model (as a &quot;batch transform&quot;). In fact, there are all kinds of hooks into the data processing pipeline whereby you can apply transforms! . An example . Let&#39;s break down one of the DataBlock examples from the documentation: . pets = DataBlock(blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(), get_y=Pipeline([attrgetter(&quot;name&quot;), RegexLabeller(pat = r&#39;^(.*)_ d+.jpg$&#39;)]), item_tfms=Resize(128), batch_tfms=aug_transforms()) . Your getters here are get_items and get_y. The first tells us that our inputs will be coming in the form of filenames returned by the get_image_files function, while the later tells the API to get the labels, or targets, for the inputs by applying a regex to the filename. There is also a get_x method available should you need to apply more specific instructions for defining your input. get_items, get_x, and get_y are all optional. Which you will need to implement depends on your data source and what you need to do to get your inputs/targets. . The splitter parameter tells us that we are going to randomly split this data with 80% for training and 20% for validation. How do I know this? Easy. In your notebook put whatever class/method you are interested followed by two ?? to see it&#39;s source. . RandomSplitter?? . So we got our data and we defined how we&#39;re going to split it for training/validation ... but how do we actually turn that into something we can feed a neural network? That is where transforms come into play and there are three primary kinds: . The data transforms defined in the blocks parameter describe how to &quot;transform&quot; your inputs and targets into what you really want to pass in to your model. Here we apply an ImageBlock to our inputs in order to turn the filenames into numerical representations of our images and a CategoryBlock to turn our targets from string labels to a unique set of numerical indexes for each of the possible labels. Essentially what these transforms do is turn your raw data into numbers because your data HAS to be represented numerically to train any kind of ML or DL model. | Next we define our item transforms via item_tfms. Our only item transform above will resize all our images to 128x128. We do this here because we&#39;ll need squared matrices to pass our images through our network in mini-batches (e.g., a subset of examples), and we can&#39;t create a mini-batch of items until they are all the same shape. These transforms are applied when we fetch an individual item from one of our datasets. | Lastly, we define our batch transforms via batch_tfms for transforms that will be applied to a &quot;mini-batch&quot; of data. Above we&#39;re saying, &quot;There&#39;s a bunch of cool data augmentations we want you to apply to the images in each mini-batch right before you send it through the model.&quot; Again, these transforms are applied on the GPU against a mini-batch of items. | You can apply transforms to a variety of places in the data processing loop, but these three will satisfy your needs 90-95% of the time. . Uh, okay ... so where&#39;s the data? . Remember that the pets DataBlock is just a blueprint, a pipeline for making raw data into modelable data. How do we build something based on this blueprint? Easy. We just call our DataBlock&#39;s dataloaders() method, passing in the one argument our get_items function, get_image_files, needs ... the directory path all your images files are under. . dls = pets.dataloaders(path/&quot;images&quot;) . Once your pets DataBlock knows the &quot;source&quot; of your data, it goes to work. It gets your image filenames, derives each image&#39;s label from that name, creates a training and validation dataset, and then applies the appropirate transforms, at the appropriate time, so that when you pull items from your DataLoaders object (your dls variable), you have something your model understands. This is the object you pass into your Learner to do the actual training. . Here&#39;s some code you can run yourself in colab: . path = untar_data(URLs.PETS) # &lt;-- Download our data; returns the path to that data pets = DataBlock(blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(), get_y=Pipeline([attrgetter(&quot;name&quot;), RegexLabeller(pat = r&#39;^(.*)_ d+.jpg$&#39;)]), item_tfms=Resize(128), batch_tfms=aug_transforms()) dls = pets.dataloaders(path/&quot;images&quot;) # &lt;-- Tell our DataBlock where the &quot;source&quot; is and off it goes dls.show_batch(max_n=9) # dls.valid.show_batch() . The Basics - PyTorch Datasets &amp; Dataloaders . Using the DataBlock API seems magical (well, it kinda is). We&#39;ve seen how easy it is to build this DataLoaders object that can be used to train our models, but in order to see what it is actually going on, we need to start at the beginning, we need to see how this is done natively in PyTorch. . Don&#39;t get confused by the similar concepts and names (e.g., Datasets, DataLoaders, transforms, etc...). Many of these ideas are built into PyTorch and extended to do much more in fast.ai. Just remember ... we&#39;re only working with PyTorch right now. . PyTorch itself provides Dataset and DataLoader classes for getting at our data and being able to iteratively run it through our model via mini-batches. Let&#39;s see how! . Dataset . A Pytorch Dataset (see torch.utils.data.Dataset) is defined as &quot;an abstract class representing a dataset&quot;2. That&#39;s just a fancy way to say it represents a collection of our data. We inherit from it and implement two key methods: . __len__: To return the size of our dataset . __getitem__: To get at a particular item in our dataset. . Let&#39;s start breaking down our DataBlock above by converting the underlying data representation as one of these Dataset classes. We&#39;ll import some new packages that will be using and create a PetCategories class that will allow us to map our target labels with their indexes (and vice-versa). . import pdb, re from torchvision import transforms . class PetCategories(): def __init__(self, image_fpaths, lbl_regex): # not all things are images self.lbl_regex = re.compile(lbl_regex) fpaths = [ f for f in image_fpaths if self.lbl_regex .match(f.name) ] # build our vocab self.vocab = dict(enumerate(set([self.lbl_regex.match(f.name).groups(0)[0] for f in fpaths if self.lbl_regex.match(f.name) ]))) # build a reverse lookup self.o2i = L(self.vocab.values()).val2idx() def get_label(self, fname): return self.lbl_regex.match(fname).groups(0)[0] . class PetsDataset(torch.utils.data.Dataset): def __init__(self, image_fpaths, pet_categories, item_tfms=None): # not all things are images self.fpaths = [ f for f in image_fpaths if f.name.endswith(&#39;.jpg&#39;)] # our &quot;item transforms&quot; self.tfm_pipeline = item_tfms # our labels vocab self.pet_categories = pet_categories def __len__(self): return len(self.fpaths) def __getitem__(self, idx): img_fpath = self.fpaths[idx] img_label = self.pet_categories.get_label(img_fpath.name) # you can think of this as a &quot;block&quot; or an &quot;data transform&quot; img = Image.open(img_fpath) lbl_idx = self.pet_categories.o2i[img_label] if self.tfm_pipeline: img = self.tfm_pipeline(img) return img, torch.tensor(lbl_idx) . There is a lot for you to explore above (step through the code, riddle it with pdb.set_trace statements, change it up and see what happens, etc....), but note the following in particular: . __getitem__ needs to return an &quot;example&quot;, which is two things ... your inputs/targets and they both need to be tensors. | item_tfms represents the PyTorch (not fast.ai) transforms we need to apply to our inputs/targets. We&#39;re going to use a special class named Compose from torchvision to set these up. For now, these transforms will just make sure our images are resized to the same size and converted to a tensor. Again, there is nothing fast.ai here (with the exception of me using the L class) ... we&#39;re just dealing with PyTorch righ now. :) | Notice how we have to create our own vocab and o2i method so we can return an integer representing the &quot;category&quot; rather than the category name (e.g. &quot;Maine_Coon&quot;) itself. Everything has to be a number! | TIP: Run all this code in colab ... do it! Make sure you understand what is going on and why. One of the most valuable techniques I use for learning all things Python, PyTorch, and fast.ai, is using pdb.set_trace() to step through and debug code. It&#39;s great way to build inutition by printing out the shapes of tensors, running parts of the code interactively, etc.... . Now ...we&#39;re going to need TWO Datasets ... one for training and one for validation. We&#39;ll split our examples up randomly and set aside 20% for our validation set. There&#39;s many ways to do this (most better and more efficient that below). . all_images = (path/&#39;images&#39;).ls(); len(all_images) . 7393 . rnd_idxs = np.random.permutation(len(all_images)); len(rnd_idxs) . 7393 . cut = int(len(rnd_idxs) * .2); cut . 1478 . train_idxs, valid_idxs = rnd_idxs[cut:], rnd_idxs[:cut] print(len(train_idxs), len(valid_idxs), len(train_idxs) + len(valid_idxs)) . 5915 1478 7393 . TIP: Notice how I print out lengths and shapes of tensors as I go? Doing that provides both a sanity check and ensure you are seeing what you expect before going further down the rabbit hole. . Now, we can create our training and validation Datasets. . Again, we are NOT using fast.ai transforms here ... these are all built into the torchvision package. They serve the same purpose here as the fast.ai &quot;item transforms&quot;, but for now, we&#39;re doing this all using just the PyTorch bits. . item_tfms = transforms.Compose([ transforms.RandomResizedCrop(224), transforms.ToTensor() ]) . categories = PetCategories(all_images[train_idxs], lbl_regex=r&#39;^(.*)_ d+.jpg$&#39;) len(categories.vocab) . 37 . train_ds = PetsDataset(all_images[train_idxs], pet_categories=categories, item_tfms=item_tfms) valid_ds = PetsDataset(all_images[valid_idxs], pet_categories=categories, item_tfms=item_tfms) print(len(train_ds), len(valid_ds)) print(train_ds[20][0].shape, train_ds[20][1]) . 5913 1477 torch.Size([3, 224, 224]) tensor(33) . DataLoader . With that we can create a torch.utils.data.DataLoader from each Dataset. The primary reason we need this object is to yield mini-batches of data into our model, but as you can see, it also provides us the ability to do much more (e.g., shuffle data, provide a collate function, etc...). Check out the docs for more info! . Note: fast.ai has it&#39;s own DataLoader class that extends THIS one from PyTorch. Yah, I know it can seem confusing, but just remember for now, we are only working with functionality built-in to PyTorch. . bsz = 64 train_dl = torch.utils.data.DataLoader(train_ds, batch_size=bsz, shuffle=True) valid_dl = torch.utils.data.DataLoader(valid_ds, batch_size=bsz*2, shuffle=False) . And voila, we can now iterate through our dataset, mini-batch by mini-batch . b = next(iter(valid_dl)) len(b), b[0].shape, b[1].shape . (2, torch.Size([128, 3, 224, 224]), torch.Size([128])) . Wow ... that took quite a bit more work than the 6 lines of code to create a DataBlock, and it&#39;s still not as functional. For example, we haven&#39;t built anything that can decode items, show batches, or allow us to easily adjust/extend the objects we created above. . So let&#39;s keep going. Starting with the low-level API, we can take these PyTorch Dataset and DataLoader objects more friendly for fast.ai Learners. . Using the Low-Level API - fast.ai DataLoaders . It&#39;s actually pretty easy to get your PyTorch Dataset class incorporated into fast.ai and get it to play nicely with fast.ai&#39;s custom DataLoaders. . from fastai2.data.core import DataLoaders . dls = DataLoaders.from_dsets(train_ds, valid_ds) . b = dls.one_batch() . len(b), b[0].shape, b[1].shape . (2, torch.Size([64, 3, 224, 224]), torch.Size([64])) . I told you it was simple, didn&#39;t I? . Notice that we didn&#39;t have to change anything in our PyTorch Dataset to create a DataLoaders object we can pass to our Learner for training. This is nice because it means, given a standard PyTorch Dataset, you can use all the wonderful fast.ai bits for training in less than 3 lines of code. . Tip: If you don&#39;t care about being able to show batches, show results, and this satisfies your needs ... STOP! You&#39;re good to go. Don&#39;t overthink you&#39;re problem or over-engineer a solution to a problem that doesn&#39;t necessarily exist. Remember: You don&#39;t have to use the mid-level API or DataBlocks to use fast.ai! . Using the Mid-Level API - Converting Your Dataset into a Transform . BUT what if we want to apply/change our transforms, or run transforms on the GPU after we have a batch, or be able to visualize our data in our datasets and dataloaders or even our predictions? To begin with, we can convert our Dataset into a Transform by doing 4 things: . Inherit from Transform instead of torch.utils.data.Dataset | Change your __getitem__ into encodes. According to the docs ... &quot;a Transform in fastai calls the encodes method when you apply it on an item (a bit like PyTorch modules call forward when applied on something).&quot;3 Here it will return the numerical representations of our data in the form of tensors. | Change your return type to be a tuple and optionally use fastai&#39;s semantic types (here we wrap our image in TensorImage which knows how to show itself). From the docs: &quot;If you then return a tuple (or a subclass of a tuple), and use fastai&#39;s semantic type, you can then apply any other fastai&#39;s transform on your data and it will be dispatched properly.&quot;4 That simply means we can add on more transforms that know how to work with TensorImage objects and they&#39;ll do the right thing. | Get rid of __len__ | class PetsTransform(Transform): def __init__(self, image_fpaths, pet_categories, item_tfms=None): # not all things are images self.fpaths = [ f for f in all_images if f.name.endswith(&#39;.jpg&#39;)] # our pytorch &quot;item transforms&quot; self.tfm_pipeline = item_tfms # our labels vocab self.pet_categories = pet_categories def __len__(self): return len(self.fpaths) def encodes(self, idx): img_fpath = self.fpaths[idx] img_label = self.pet_categories.get_label(img_fpath.name) # you can think of this as a &quot;block&quot; or an &quot;data transform&quot; img = Image.open(img_fpath) lbl_idx = self.pet_categories.o2i[img_label] if self.tfm_pipeline: img = self.tfm_pipeline(img) return (TensorImage(img), torch.tensor(lbl_idx)) . Now that we are using a Transform, we have to use a new kind of object to build our dataset: TfmdLists . A TfmdList is &quot;just an object that lazily applies a collection of Transforms on a list.&quot;5 Think of it as a fancy Dataset object that knows how to work with Transform objects. . train_fpaths = all_images[train_idxs] valid_fpaths = all_images[valid_idxs] train_tl= TfmdLists(range(len(train_idxs)), PetsTransform(train_fpaths, pet_categories=categories, item_tfms=item_tfms)) valid_tl= TfmdLists(range(len(valid_idxs)), PetsTransform(valid_fpaths, pet_categories=categories, item_tfms=item_tfms)) . Since this is just another kind of dataset, we can pass these TfmdLists objects to DataLoaders just like before. But notice, we can now add fast.ai transforms to it just like we did in the DataBlock example at the top. We&#39;re already resizing and converting the examples to tensors, so we&#39;ll add some after_batch transforms for normalization and augmentations. . dls = DataLoaders.from_dsets(train_tl, valid_tl, after_batch=[Normalize.from_stats(*imagenet_stats), *aug_transforms()]) dls = dls.cuda() . b = dls.one_batch() len(b), b[0].shape, b[1].shape . (2, torch.Size([64, 3, 224, 224]), torch.Size([64])) . Let&#39;s see if we can show a batch of our data. Uncomment the line below, run it, and yah ... it throws an exception. But why? . . If you guessed it is because show_batch doesn&#39;t know what to do with the target&#39;s numerical index, bingo! You&#39;re right. . Let&#39;s start to fix that by actually creating our own class that represents our inputs/targets. Notice that besides inheriting from Tuple, all we are providing is a show method that tells a PetImage object how to show itself. According to the docs, &quot;fastai will call [your transforms decodes methods] until it arrives at a type that knows how to show itself, then call the show method on this type.&quot;6 . BTW, a lot of this code is just ripped from the &quot;Siamese tutorial&quot; in the docs, so don&#39;t be too impressed. If you want to really do a deep dive and work though all this given a different task, check it out here. . class PetImage(Tuple): def show(self, ctx=None, **kwargs): img, category_idx = self if not isinstance(img, Tensor): img_tensor = tensor(img) img_tensor = img_tensor.permute(2,0,1) else: img_tensor = img return show_image(img_tensor, title=categories.vocab[category_idx], ctx=ctx, **kwargs) . The show method knows how to work with tensors or PIL images. The last method is a helper method available in fast.ai to actually show an image and print it&#39;s title above it. If you pass in a ctx it will use that to format and place the images appropriate. A context can be something like a matplotlib axis or a DataFrame ... it &quot;represents the object where we will show our thing.&quot;7 . Now let&#39;s make some changes to our PetsTransform to make it a bit more fastai&#39;sh. . First, we&#39;ll use PILImage.create to create the image in encodes. We do this because that object allows us to apply fast.ai transform liks Resize and ToTensor directly on it. . Second, we&#39;re going to move to using fast.ai transforms for everything, so we&#39;ll get rid of the PyTorch transforms! . Third, notice our encodes now returns a PetsImage. It&#39;s just a tuple ... but because its a particular kind of tuple, we can use the typdispatched show_batch and show_results to actually visualize our data/results. . class PetsTransform2(Transform): def __init__(self, image_fpaths, pet_categories): # not all things are images self.fpaths = [ f for f in all_images if f.name.endswith(&#39;.jpg&#39;)] # our labels vocab self.pet_categories = pet_categories def __len__(self): return len(self.fpaths) def encodes(self, img_fpath): img = PILImage.create(img_fpath) img_label = self.pet_categories.get_label(img_fpath.name) lbl_idx = self.pet_categories.o2i[img_label] return PetImage(img, lbl_idx) . Because of these changes, instead of creating the separate TfmdLists ourselves, we can now further do things the &quot;fast.ai way&quot; by using a splitter to do that for us. Here we&#39;ll use RandomSplitter which gives us that same 80/20 training/validation split. . splits = RandomSplitter()(all_images) tfm = PetsTransform2(all_images, categories) . Now we can get both our datasets in one line of code! When we pass splits to TfmdLists, it takes care of creating our training and validation datasets! . tls = TfmdLists(all_images, tfm, splits=splits) . And thanks for our PetImage class, fast.ai can show an item from our dataset. . show_at(tls.valid, 0) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fee17e84518&gt; . Even better, we can now specify all our transforms using fast.ai in the call to dataloaders(). And because these are fast.ai DataLoader objects, we can add tranforms at any point in our data processing pipeline (not just after_item and after_batch). . dls = tls.dataloaders(after_item=[Resize(224), ToTensor], after_batch=[IntToFloatTensor, Normalize.from_stats(*imagenet_stats)]) . In the process, notice how we&#39;ve also refactored our code into something much more reusable. For example, if we want to resize our images to something else, its as easy as ... . new_dl = dls.new(after_item=[Resize(64), ToTensor]) new_dl.one_batch()[0].shape . torch.Size([64, 3, 64, 64]) . And what about showing a batch of data? Unfortunately it still won&#39;t work. show_batch is designed primarily to work with the DataBlock API, but here, we&#39;re returning the whole thing as a single transform. . The solution is easy: use the @typedispatch mechanism and override show_batch so that our x (our input) is &quot;typed&quot;. . b = dls.one_batch() . dls._types, type(b) . ({__main__.PetImage: [fastai2.torch_core.TensorImage, torch.Tensor]}, __main__.PetImage) . @typedispatch def show_batch(x:PetImage, y, samples, ctxs=None, max_n=6, nrows=None, ncols=3, figsize=None, **kwargs): if figsize is None: figsize = (ncols*6, max_n//ncols * 3) if ctxs is None: ctxs = get_grid(min(x[0].shape[0], max_n), nrows=None, ncols=ncols, figsize=figsize) for i,ctx in enumerate(ctxs): PetImage(x[0][i], x[1][i].item()).show(ctx=ctx) . dls.show_batch() . When dls.show_batch() runs, it will find the closes matching version of show_batch() available to execute given chat the batch is. We could even write a typedispatched show_results() to look at our predictions alongside our targets using the same technique we applied to show_batch(). . Using the mid-level API, you not only have a Dataloaders object good to go for training ... you have one that you can use to show your data and extend by applying/changing as many transforms to wherever you want in the data processing pipeline. . What could be better than this? . Answer: Doing all this with &lt; 10 lines of code using the DataBlock API. . We&#39;ve already looked at how it works above, now, we&#39;ll look at the questions you need to ask to construct it in accordance with your data and task. Again, if the above gets you where you need to be, you don&#39;t need to use the high-level DataBlock API. There is no right option for every task and there are many ways to get where you need to go. . Using the High-Level API - DataBlocks . Having looked at the basic data-processing units in PyTorch, then to the low and mid-level APIs available in fast.ai, you&#39;re probably wondering, &quot;Ok, how can I do all that by drawing up a DataBlock blueprint for my task?&quot; . The path to enlightment comes in the form of answering 7 questions. . Asking the right questions . Assuming you understand your task and data, once you&#39;ve answered these 7 questions you&#39;ll know everything you need to construct your own DataBlock. These come right out of the DataBlock tutorial so check that for even more details and example implementations! . What are the types of your inputs and targets? (e.g., images/categories) | Where is your data? (e.g., filenames in folders, a DataFrame, a database) | Do we need to do anything special to get our &quot;inputs&quot;? If so, use get_x | Do we need to do anything special to get our &quot;targets&quot;? If yes, use get_y | How do you want to split the data into training and validation sets? Use splitter | Do we need to do anything when we get an item? If yes, define that in item_tfms | Do we need to do anything to a &quot;mini-batch&quot; of data? If yes, define that in batch_tfms | Getting the right answers . Looking back at our example DataBlock ... . pets = DataBlock(blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(), get_y=Pipeline([attrgetter(&quot;name&quot;), RegexLabeller(pat = r&#39;^(.*)_ d+.jpg$&#39;)]), item_tfms=Resize(128), batch_tfms=aug_transforms()) . We knew how to construct it as such because: . 1.What are the types of your inputs and targets? Answer: inputs=pet images | targets=37 categories. So we need an ImageBlock to handle the images and a CategoryBlock to handle the labels. Those blocks will add the needed transforms for each of their respective pieces. . 2.Where is your data? Answer: filenames . 3.Do we need to do anything special to get our &quot;inputs&quot;? Answer: No, get_items will get our input images. . 4.Do we need to do anything special to get our &quot;targets&quot;? Answer: Yes, we need to implement a get_y to get our labels from the image file name. . 5.How do you want to split the data into training and validation sets? Answer: We just want a random 80/20 split, so use RandomSplitter . 6.Do we need to do anything when we get an item? Answer: Yes, we need to resize our images so they are the same shape and can be included together in a mini-batch. Do this in item_tfms . 7.Do we need to do anything to a &quot;mini-batch&quot; of data? Answer: Yes, we&#39;d like to add some randomization to the images by applying data augmentations on the GPU. Do this with batch_tfms . Tips, Tricks, Best Practices, &amp; A Bunch of Good Things to Know . Below are some of the more important things and best practices to be aware of when working with the DataBlock API. It&#39;s in no way exhaustive, but anything I&#39;ve had to lookup multiple times is listed here. . What happens if I don&#39;t define how to get my targets (my y)? . If you don&#39;t specify your labels, the DataBlock API will assume they are the same as your inputs. This is atypical for most tasks, but not entirely useless. According to the docs, &quot;by default, the data block API assumes we have an input and a target, which is why we see our filename repeated twice&quot; whenever you view the results of your datasets/dataloaders without a y specified.8 . Can I have multiple inputs/targets? . Yes! According to the docs ... &quot;You can also have more than two blocks (if you have multiple inputs and/or targets), you would just need to pass n_inp to the DataBlock to tell the library how many inputs there are (the rest would be targets) and pass a list of functions to get_x and/or get_y (to explain how to process each item to be ready for his type).&quot;9 We&#39;ll explore this in Part 2 of this series where I attempt to update my v1 MixedTabluarList object (incorporates tabular + text) into something v2 friendly. In the meantime, here&#39;s a nice example from the docs on setting up a dataset for object detection: . coco = DataBlock(blocks=(ImageBlock, BBoxBlock, BBoxLblBlock), get_items=get_image_files, splitter=RandomSplitter(), get_y=[lambda o: img2bbox[o.name][0], lambda o: img2bbox[o.name][1]], item_tfms=Resize(128), batch_tfms=aug_transforms(), n_inp=1) . You see that n_inp? It&#39;s saying, &quot;Use the ImageBlock for my inputs (I only have 1), but I&#39;ll need TWO targets this time as I&#39;m trying to predict the location of an object (BBoxBlock) and it&#39;s label (BBoxLblBlock).&quot; Notice also because we are predicting TWO things, our get_y returns a list of, you guessed it, two things. If we didn&#39;t need to do anything special with either of these targets, we&#39;d simply pass noop in it&#39;s place in that list. . Where can I learn about the baked in bits of the DataBlock API? . The API already has a lot of useful classes and functions suitable for defining your getters, splitter, and transforms across a number of application types. The full list is here: http://dev.fast.ai/data.transforms . What if something goes wrong? Or what if I want to make sure my DataBlock is doing what I think it is? . Use dblock.summary(path). If there is an error, this thing will bomb out where it is encountered ... else, you&#39;ll be able to verify that all the wonderful things your 5-10 lines of code above does what you expect. . Do I need to always use get_items? . No. For example, if your &quot;source&quot; data is a DataFrame ... . pascal = DataBlock(blocks=(ImageBlock, MultiCategoryBlock), splitter=ColSplitter(), get_x=ColReader(0, pref=pascal_source/&quot;train&quot;), get_y=ColReader(1, label_delim=&#39; &#39;), item_tfms=Resize(224), batch_tfms=aug_transforms()) dls = pascal.dataloaders(df) . According to the docs ... &quot;we wont have to use a get_items function here because we already have all our data in one place.&quot;10 . What are different ways I can get my x and y from a DataFrame? . Using ColReader: . get_x=ColReader(0, pref=pascal_source/&quot;train&quot;), get_y=ColReader(1, label_delim=&#39; &#39;) . Using lambda functions: . get_x=lambda x:pascal_source/&quot;train&quot;/f&#39;{x[0]}&#39;, get_y=lambda x:x[1].split(&#39; &#39;), . Using column names: . get_x=lambda o:f&#39;{pascal_source}/train/&#39;+o.fname, get_y=lambda o:o.labels.split(), . Using from_columns: . def _pascal_items(x): return (f&#39;{pascal_source}/train/&#39;+x.fname, x.labels.str.split()) valid_idx = df[df[&#39;is_valid&#39;]].index.values pascal = DataBlock.from_columns(blocks=(ImageBlock, MultiCategoryBlock), get_items=_pascal_items, splitter=IndexSplitter(valid_idx), item_tfms=Resize(224), batch_tfms=aug_transforms()) . According to the docs, this is &quot;the most efficient way (to avoid iterating over the rows of the dataframe, which can take a long time) .... It will use get_items to convert the columns in numpy arrays. The drawback is that since we lose the dataframe after extracting the relevant columns, we can&#39;t use a ColSplitter anymore.&quot;11 . What about tabular data? . We&#39;ll explore the tabular bits in a later part, but as the docs say, the &quot;tabular data doesn&#39;t really use the data block API as it&#39;s relying on another API with TabularPandas for efficient preprocessing and batching.&quot;12 Of course, where there is a will, there is a way, and so we&#39;ll see a possible solution in Part 2 or 3 of this series :). . Summary . As the famous song goes, &quot;we&#39;ve only just begun ....&quot; In future installments we&#39;ll dig into more of the particulars of the entire fast.ai data stack, and see how we can use it to solve some &quot;out-of-the-box&quot; tasks. . In the meantime, the best way for you to get a better handle on what&#39;s what, is to mess around with the many examples found in the v2 documentation here. . References . http://dev.fast.ai/tutorial.datablock | http://dev.fast.ai/tutorial.siamese | http://dev.fast.ai/data.block | http://dev.fast.ai/data.transforms | fastai v2 walk-thru playlist | Zach Mueller&#39;s &quot;A Guided Walk-through of 2.0&quot;: Lesson 1 | 1. See full playlist here↩ . 2. https://pytorch.org/tutorials/beginner/data_loading_tutorial.html#dataset-class↩ . 3. http://dev.fast.ai/tutorial.siamese#Using-the-mid-level-API↩ . 4. Ibid.↩ . 5. http://dev.fast.ai/tutorial.siamese#Using-the-mid-level-API↩ . 6. http://dev.fast.ai/tutorial.siamese#Making-show-work↩ . 7. Ibid.↩ . 8. http://dev.fast.ai/tutorial.datablock↩ . 9. Ibid.↩ . 10. Ibid.↩ . 11. Ibid.↩ . 12. Ibid.↩ .",
            "url": "https://ohmeow.com/posts/2020/04/11/finding-datablock-nirvana-part-1.html",
            "relUrl": "/posts/2020/04/11/finding-datablock-nirvana-part-1.html",
            "date": " • Apr 11, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Loss Functions: Cross Entropy Loss and You!",
            "content": "!pip install fastai . import torch from torch.nn import functional as F from fastai2.vision.all import * . We&#39;ve been doing multi-classification since week one, and last week, we learned about how a NN &quot;learns&quot; by evaluating its predictions as measured by something called a &quot;loss function.&quot; . So for multi-classification tasks, what is our loss function? . path = untar_data(URLs.PETS)/&#39;images&#39; def is_cat(x): return x[0].isupper() dls = ImageDataLoaders.from_name_func( path, get_image_files(path), valid_pct=0.2, seed=42, label_func=is_cat, item_tfms=Resize(224)) learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.loss_func . Downloading: &#34;https://download.pytorch.org/models/resnet34-333f7ec4.pth&#34; to /root/.cache/torch/checkpoints/resnet34-333f7ec4.pth . . FlattenedLoss of CrossEntropyLoss() . Negative Log-Likelihood &amp; CrossEntropy Loss . To understand CrossEntropyLoss, we need to first understand something called Negative Log-Likelihood . Negative Log-Likelihood (NLL) Loss . Let&#39;s imagine a model who&#39;s objective is to predict the label of an example given five possible classes to choose from. Our predictions might look like this ... . preds = torch.randn(3, 5); preds . tensor([[-0.3139, 0.6737, -0.0143, 1.9929, -0.6949], [ 0.5285, 0.1311, 0.2628, 0.6450, 1.7745], [-1.7458, 2.0199, -0.1365, 1.4622, -0.0940]]) . Because this is a supervised task, we know the actual labels of our three training examples above (e.g., the label of the first example is the first class, the label of the 2nd example the 4th class, and so forth) . targets = torch.tensor([0, 3, 4]) . Step 1: Convert the predictions for each example into probabilities using softmax. This describes how confident your model is in predicting what it belongs to respectively for each class . probs = F.softmax(preds, dim=1); probs . tensor([[0.0635, 0.1704, 0.0856, 0.6372, 0.0433], [0.1421, 0.0955, 0.1089, 0.1596, 0.4939], [0.0126, 0.5458, 0.0632, 0.3125, 0.0659]]) . If we sum the probabilities across each example, you&#39;ll see they add up to 1 . probs.sum(dim=1) . tensor([1.0000, 1.0000, 1.0000]) . Step 2: Calculate the &quot;negative log likelihood&quot; for each example where y = the probability of the correct class . loss = -log(y) . We can do this in one-line using something called tensor/array indexing . example_idxs = range(len(preds)); example_idxs . range(0, 3) . correct_class_probs = probs[example_idxs, targets]; correct_class_probs . tensor([0.0635, 0.1596, 0.0659]) . nll = -torch.log(correct_class_probs); nll . tensor([2.7574, 1.8349, 2.7194]) . Step 3: The loss is the mean of the individual NLLs . nll.mean() . tensor(2.4372) . ... or using PyTorch . F.nll_loss(torch.log(probs), targets) . tensor(2.4372) . Cross Entropy Loss . ... or we can do this all at once using PyTorch&#39;s CrossEntropyLoss . F.cross_entropy(preds, targets) . tensor(2.4372) . As you can see, cross entropy loss simply combines the log_softmax operation with the negative log-likelihood loss . So why not use accuracy? . def plot_function(f, tx=None, ty=None, title=None, min=-2, max=2, figsize=(6,4)): x = torch.linspace(min,max) fig,ax = plt.subplots(figsize=figsize) ax.plot(x,f(x)) if tx is not None: ax.set_xlabel(tx) if ty is not None: ax.set_ylabel(ty) if title is not None: ax.set_title(title) . def f(x): return -torch.log(x) plot_function(f, &#39;x (prob correct class)&#39;, &#39;-log(x)&#39;, title=&#39;Negative Log-Likelihood&#39;, min=0, max=1) . NLL loss will be higher the smaller the probability of the correct class . What does this all mean? The lower the confidence it has in predicting the correct class, the higher the loss. It will: . 1) Penalize correct predictions that it isn&#39;t confident about more so than correct predictions it is very confident about. . 2) And vice-versa, it will penalize incorrect predictions it is very confident about more so than incorrect predictions it isn&#39;t very confident about . Why is this better than accuracy? . Because accuracy simply tells you whether you got it right or wrong (a 1 or a 0), whereast NLL incorporates the confidence as well. That information provides you&#39;re model with a much better insight w/r/t to how well it is really doing in a single number (INF to 0), resulting in gradients that the model can actually use! . Rember that a loss function returns a number. That&#39;s it! . Or the more technical explanation from fastbook: . &quot;The gradient of a function is its slope, or its steepness, which can be defined as rise over run -- that is, how much the value of function goes up or down, divided by how much you changed the input. We can write this in maths:(y_new-y_old) / (x_new-x_old). Specifically, it is defined when x_new is very similar to x_old, meaning that their difference is very small. But accuracy only changes at all when a prediction changes from a 3 to a 7, or vice versa. So the problem is that a small change in weights from x_old to x_new isn&#39;t likely to cause any prediction to change, so (y_new - y_old) will be zero. In other words, the gradient is zero almost everywhere. As a result, a very small change in the value of a weight will often not actually change the accuracy at all. This means it is not useful to use accuracy as a loss function. When we use accuracy as a loss function, most of the time our gradients will actually be zero, and the model will not be able to learn from that number. That is not much use at all!&quot; 1 . Summary . So to summarize, accuracy is a great metric for human intutition but not so much for your your model. If you&#39;re doing multi-classification, your model will do much better with something that will provide it gradients it can actually use in improving your parameters, and that something is cross-entropy loss. . References . https://pytorch.org/docs/stable/nn.html#crossentropyloss | http://wiki.fast.ai/index.php/Log_Loss | https://ljvmiranda921.github.io/notebook/2017/08/13/softmax-and-the-negative-log-likelihood/ | https://ml-cheatsheet.readthedocs.io/en/latest/loss_functions.html#cross-entropy | https://machinelearningmastery.com/loss-and-loss-functions-for-training-deep-learning-neural-networks/ | 1. fastbook chaper 4↩ .",
            "url": "https://ohmeow.com/posts/2020/04/04/understanding-cross-entropy-loss.html",
            "relUrl": "/posts/2020/04/04/understanding-cross-entropy-loss.html",
            "date": " • Apr 4, 2020"
        }
        
    
  
    
  
    
  
    
        ,"post9": {
            "title": "Understanding the F-Beta metric",
            "content": "Overview . scikit-learn describes the F-Beta score &quot;as the weighted harmonic mean of precision and recall, reaching its optimal value at 1 and its worst value at 0&quot; with the &quot;beta parameter [determining] the weight of recall in the combined score.&quot; It is one of the most common metrics enlisted in demonstrating the performance of binary, multi-classification, and multi-label classifiers. . So what does all that mean? . In a nutshell, it says that this metric can be used to help you understand how good your classification model is based on the relative importance you ascribe to precision and recall in making that determination. Common beta values are 0.5 (precision is king), 1 (precision and recall are equally important), and 2 (recall is king). . When you look at the documentation, you&#39;ll notice there are several other interesting arguments you can pass into it. Two of the more mysterious ones being average and sample_weight. Will explore what they mean how you may want to use them based on your dataset. . The two metrics, along with other important terms, are described well in this post. Let&#39;s imagine a multi-classification model that tries to determine whether a photo show a picture of a dog, cat, or bird. . Precision vs. Recall . The two metrics, along with other important terms, are described really well in this post. Let&#39;s imagine a multi-classification model that tries to determine whether a given photo is a picture of a dog, cat, or bird. . Precision . Definition: When your classifier predicted a label, how often was it correct? . Example: When you predicted &#39;cat&#39;, how often were you right? . Formula: True Positive (TP) / PREDICTED Label (TP + False Positive or FP) . # TP = number of cat prediction you got right tp = 100 # FP = number of cat predictions you got wrong fp = 10 precision = tp / (tp + fp) # = 0.91 . Recall . Definition: For every actual label in your dataset, how often did your classifier pick the correct one? . Example: When it&#39;s actually &#39;cat&#39;, how often did it predict &#39;cat&#39;? . Formula: True Positive (TP) / ACTUAL Label (TP + False Negative or FN) . # TP = number of cat prediction you got right tp = 100 # FN = number of actual cats you predicted as something else fn = 5 recall = tp / (tp + fn) # = 0.95 . Okay, so which one should I use? . This depends on your task. . If you&#39;re task is to predict whether a patient has cancer given set of symptoms and test results, it&#39;s going to be far more important to you that all actual cancer patients get flagged even at the expense of non-cancer patients being flagged incorrectly. This is recall. In this particular kind of task, you&#39;re also likely going to be facing a dataset were the vast majority of examples are &quot;not cancer.&quot; A case where using metrics like precision and accuracy will likely look really good but be completely misleading. Other examples where you want to maximize recall include fraud and network anomaly detection. . On the otherhand, if you&#39;re task is to predict whether an e-mail is spam or not (1=spam|0=not spam), you recognize that it&#39;s not the end of the world if your user gets a junk e-mail. If fact, it would be worse if an actual e-mail got flagged as junk and they didn&#39;t see it. Getting it wrong is more acceptable than making sure all the true cases are gotten right. This is precision. Here, you&#39;re more concerned about your classifiers overall predictive capability in coming up with the right answer, yes or no. . What about our cats, dogs, birds? . Good question, again it depends on the task. All things be equal, most likely we care more about precision or we care about both equally in this case. Fortunately, the F-Beta metric gives us the power to determine the worth of our model regardless of how we want to weight the two. .",
            "url": "https://ohmeow.com/temp-posts/fbeta-metric",
            "relUrl": "/temp-posts/fbeta-metric",
            "date": " • Jan 1, 1999"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey there! Wayde here. . I’m the owner of ohmeow.com and have been engaged in the development of mid-to-enterprise level application development for over 20 years. An active member in the fast.ai community and contributor to their deep learning framework, you can usually find me on their forums and/or tweeting about the latest and greatest from the world of AI. I also have the privilege to mentor a number of High School students on a local FIRST Robotics FRC team (go team 2102!). . I’m not one for most social media (honestly, most of it’s nonsense and a net negative to our species), however, you can find me on twitter where my account is primarily professional in nature or via e-mail. If you want to talk shop or see where we can help your organization, we’d love to hear from you! . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ohmeow.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ohmeow.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}